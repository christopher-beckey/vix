// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.Pex.Engine.Exceptions;
using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace VistA.Imaging.Security.Cryptography
{
    public partial class AesBase64Test
    {
[TestMethod]
[PexGeneratedBy(typeof(AesBase64Test))]
public void Constructor869()
{
    AesBase64 aesBase64;
    byte[] bs = new byte[16];
    aesBase64 = this.Constructor(bs);
    Assert.IsNotNull((object)aesBase64);
    Assert.IsNotNull(aesBase64.Key);
    Assert.AreEqual<int>(16, (int)(aesBase64.Key.Length));
    Assert.AreEqual<byte>((byte)0, aesBase64.Key[0]);
    Assert.AreEqual<byte>((byte)0, aesBase64.Key[1]);
    Assert.AreEqual<byte>((byte)0, aesBase64.Key[2]);
    Assert.AreEqual<byte>((byte)0, aesBase64.Key[3]);
    Assert.AreEqual<byte>((byte)0, aesBase64.Key[4]);
    Assert.AreEqual<byte>((byte)0, aesBase64.Key[5]);
    Assert.AreEqual<byte>((byte)0, aesBase64.Key[6]);
    Assert.AreEqual<byte>((byte)0, aesBase64.Key[7]);
    Assert.AreEqual<byte>((byte)0, aesBase64.Key[8]);
    Assert.AreEqual<byte>((byte)0, aesBase64.Key[9]);
    Assert.AreEqual<byte>((byte)0, aesBase64.Key[10]);
    Assert.AreEqual<byte>((byte)0, aesBase64.Key[11]);
    Assert.AreEqual<byte>((byte)0, aesBase64.Key[12]);
    Assert.AreEqual<byte>((byte)0, aesBase64.Key[13]);
    Assert.AreEqual<byte>((byte)0, aesBase64.Key[14]);
    Assert.AreEqual<byte>((byte)0, aesBase64.Key[15]);
}
[TestMethod]
[PexGeneratedBy(typeof(AesBase64Test))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException560()
{
    try
    {
      AesBase64 aesBase64;
      aesBase64 = this.Constructor((byte[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(AesBase64Test))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException672()
{
    try
    {
      AesBase64 aesBase64;
      byte[] bs = new byte[0];
      aesBase64 = this.Constructor(bs);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(AesBase64Test))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException305()
{
    try
    {
      AesBase64 aesBase64;
      byte[] bs = new byte[33];
      aesBase64 = this.Constructor(bs);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
