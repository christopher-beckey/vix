// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.Pex.Engine.Exceptions;
using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace VistA.Imaging.Security.Cryptography
{
    public partial class AesBase64Test
    {
[TestMethod]
[PexGeneratedBy(typeof(AesBase64Test))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void EncryptStringThrowsContractException319()
{
    try
    {
      AesBase64 aesBase64;
      string s;
      byte[] bs = new byte[16];
      aesBase64 = new AesBase64(bs);
      s = this.EncryptString(aesBase64, (string)null, (string)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(AesBase64Test))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void EncryptStringThrowsContractException90()
{
    try
    {
      AesBase64 aesBase64;
      string s;
      byte[] bs = new byte[24];
      aesBase64 = new AesBase64(bs);
      s = this.EncryptString(aesBase64, "", (string)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(AesBase64Test))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void EncryptStringThrowsContractException309()
{
    try
    {
      AesBase64 aesBase64;
      string s;
      byte[] bs = new byte[16];
      aesBase64 = new AesBase64(bs);
      s = this.EncryptString(aesBase64, "\0", "\0");
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(AesBase64Test))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void EncryptStringThrowsContractException871()
{
    try
    {
      AesBase64 aesBase64;
      string s;
      byte[] bs = new byte[24];
      aesBase64 = new AesBase64(bs);
      s = this.EncryptString(aesBase64, "\ufeff", "\ufeff");
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(AesBase64Test))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void EncryptStringThrowsContractException722()
{
    try
    {
      AesBase64 aesBase64;
      string s;
      byte[] bs = new byte[16];
      aesBase64 = new AesBase64(bs);
      s = this.EncryptString(aesBase64, "\0\0\0\0", "\0\0\0\0");
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(AesBase64Test))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void EncryptStringThrowsContractException285()
{
    try
    {
      AesBase64 aesBase64;
      string s;
      byte[] bs = new byte[16];
      aesBase64 = new AesBase64(bs);
      s = this.EncryptString(aesBase64, "\0\ufeff", "\0\ufeff");
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(AesBase64Test))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void EncryptStringThrowsContractException772()
{
    try
    {
      AesBase64 aesBase64;
      string s;
      byte[] bs = new byte[16];
      aesBase64 = new AesBase64(bs);
      s = this.EncryptString(aesBase64, "\ufeff\0", "\ufeff\0");
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(AesBase64Test))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void EncryptStringThrowsContractException33()
{
    try
    {
      AesBase64 aesBase64;
      string s;
      byte[] bs = new byte[16];
      aesBase64 = new AesBase64(bs);
      s = this.EncryptString(aesBase64, "\0\ufeff\ufeff", "\0\ufeff\ufeff");
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(AesBase64Test))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void EncryptStringThrowsContractException907()
{
    try
    {
      AesBase64 aesBase64;
      string s;
      byte[] bs = new byte[16];
      aesBase64 = new AesBase64(bs);
      s = this.EncryptString(aesBase64, "\ufeff\ufeff", "\ufeff\ufeff");
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
