// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.Pex.Engine.Exceptions;
using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace VistA.Imaging.Security.Cryptography
{
    public partial class AesBase64Test
    {
[TestMethod]
[PexGeneratedBy(typeof(AesBase64Test))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException576()
{
    try
    {
      AesBase64 aesBase64;
      aesBase64 = this.Constructor01((string)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(AesBase64Test))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException497()
{
    try
    {
      AesBase64 aesBase64;
      aesBase64 = this.Constructor01("\ufeff");
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(AesBase64Test))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException399()
{
    try
    {
      AesBase64 aesBase64;
      aesBase64 = this.Constructor01("");
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(AesBase64Test))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException750()
{
    try
    {
      AesBase64 aesBase64;
      aesBase64 = this.Constructor01("\0");
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(AesBase64Test))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException481()
{
    try
    {
      AesBase64 aesBase64;
      aesBase64 = this.Constructor01("\ufeff\0");
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(AesBase64Test))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException852()
{
    try
    {
      AesBase64 aesBase64;
      aesBase64 = this.Constructor01("\ufeff\ufeff");
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(AesBase64Test))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException680()
{
    try
    {
      AesBase64 aesBase64;
      aesBase64 = this.Constructor01("\0\u3000");
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(AesBase64Test))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException300()
{
    try
    {
      AesBase64 aesBase64;
      aesBase64 = this.Constructor01("\ufeff\0\ufeff\ufeff");
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
