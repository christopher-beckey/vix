// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.Pex.Framework.Moles;
using VistA.Imaging.DataNavigator.Repositories.Moles;
using VistA.Imaging.DataNavigator.ViewModels.Factories.Moles;
using VistA.Imaging.DataNavigator.ViewModels;
using VistA.Imaging.DataNavigator.Repositories;
using VistA.Imaging.DataNavigator.Model;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Framework;
using ImagingClient.Infrastructure.Prism.Mvvm;

namespace VistA.Imaging.DataNavigator.ViewModels.Factories
{
    public partial class HierarchicalEntryViewModelFactoryTest
    {
[TestMethod]
[PexGeneratedBy(typeof(HierarchicalEntryViewModelFactoryTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void CreateHierarchicalEntryViewModelThrowsArgumentNullException458()
{
    using (PexChooseBehavedBehavior.Setup())
    {
      SIFilemanFileRepository sIFilemanFileRepository;
      SIFilemanEntryRepository sIFilemanEntryRepository;
      SIHierarchicalEntryLoadViewModelFactory 
        sIHierarchicalEntryLoadViewModelFactory;
      HierarchicalEntryViewModelFactory hierarchicalEntryViewModelFactory;
      HierarchicalEntryViewModel hierarchicalEntryViewModel;
      sIFilemanFileRepository = new SIFilemanFileRepository();
      sIFilemanEntryRepository = new SIFilemanEntryRepository();
      sIHierarchicalEntryLoadViewModelFactory =
        new SIHierarchicalEntryLoadViewModelFactory();
      hierarchicalEntryViewModelFactory = new HierarchicalEntryViewModelFactory
                                              ((IFilemanFileRepository)sIFilemanFileRepository, 
                                               (IFilemanEntryRepository)sIFilemanEntryRepository, 
                                               (IHierarchicalEntryLoadViewModelFactory)
                                                 sIHierarchicalEntryLoadViewModelFactory);
      hierarchicalEntryViewModel = this.CreateHierarchicalEntryViewModel
                                       (hierarchicalEntryViewModelFactory, (FilemanEntry)null);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(HierarchicalEntryViewModelFactoryTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void CreateHierarchicalEntryViewModelThrowsArgumentNullException688()
{
    using (PexChooseBehavedBehavior.Setup())
    {
      SIFilemanFileRepository sIFilemanFileRepository;
      SIFilemanEntryRepository sIFilemanEntryRepository;
      SIHierarchicalEntryLoadViewModelFactory 
        sIHierarchicalEntryLoadViewModelFactory;
      HierarchicalEntryViewModelFactory hierarchicalEntryViewModelFactory;
      HierarchicalEntryViewModel hierarchicalEntryViewModel;
      sIFilemanFileRepository = new SIFilemanFileRepository();
      sIFilemanEntryRepository = new SIFilemanEntryRepository();
      sIHierarchicalEntryLoadViewModelFactory =
        new SIHierarchicalEntryLoadViewModelFactory();
      IPexChoiceRecorder choices = PexChoose.Replay.Setup();
      hierarchicalEntryViewModelFactory = new HierarchicalEntryViewModelFactory
                                              ((IFilemanFileRepository)sIFilemanFileRepository, 
                                               (IFilemanEntryRepository)sIFilemanEntryRepository, 
                                               (IHierarchicalEntryLoadViewModelFactory)
                                                 sIHierarchicalEntryLoadViewModelFactory);
      FilemanEntry s0 = new FilemanEntry();
      s0.Ien = (string)null;
      s0.File = (FilemanFile)null;
      s0.Values = (FilemanFieldValue[])null;
      hierarchicalEntryViewModel =
        this.CreateHierarchicalEntryViewModel(hierarchicalEntryViewModelFactory, s0);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(HierarchicalEntryViewModelFactoryTest))]
public void CreateHierarchicalEntryViewModel779()
{
    using (PexChooseBehavedBehavior.Setup())
    {
      SIFilemanFileRepository sIFilemanFileRepository;
      SIFilemanEntryRepository sIFilemanEntryRepository;
      SIHierarchicalEntryLoadViewModelFactory 
        sIHierarchicalEntryLoadViewModelFactory;
      HierarchicalEntryViewModelFactory hierarchicalEntryViewModelFactory;
      HierarchicalEntryViewModel hierarchicalEntryViewModel;
      sIFilemanFileRepository = new SIFilemanFileRepository();
      sIFilemanEntryRepository = new SIFilemanEntryRepository();
      sIHierarchicalEntryLoadViewModelFactory =
        new SIHierarchicalEntryLoadViewModelFactory();
      IPexChoiceRecorder choices = PexChoose.Replay.Setup();
      hierarchicalEntryViewModelFactory = new HierarchicalEntryViewModelFactory
                                              ((IFilemanFileRepository)sIFilemanFileRepository, 
                                               (IFilemanEntryRepository)sIFilemanEntryRepository, 
                                               (IHierarchicalEntryLoadViewModelFactory)
                                                 sIHierarchicalEntryLoadViewModelFactory);
      FilemanEntry s0 = new FilemanEntry();
      s0.Ien = (string)null;
      FilemanFile s1 = new FilemanFile();
      s1.Name = (string)null;
      s1.Number = (string)null;
      s1.Fields = (FilemanField[])null;
      s0.File = s1;
      s0.Values = (FilemanFieldValue[])null;
      hierarchicalEntryViewModel =
        this.CreateHierarchicalEntryViewModel(hierarchicalEntryViewModelFactory, s0);
      Assert.IsNotNull((object)hierarchicalEntryViewModel);
      Assert.IsNotNull(hierarchicalEntryViewModel.File);
      Assert.AreEqual<string>((string)null, hierarchicalEntryViewModel.File.Name);
      Assert.AreEqual<string>((string)null, hierarchicalEntryViewModel.File.Number);
      Assert.IsNull(hierarchicalEntryViewModel.File.Fields);
      Assert.IsNotNull(hierarchicalEntryViewModel.Entry);
      Assert.AreEqual<string>((string)null, hierarchicalEntryViewModel.Entry.Ien);
      Assert.IsNotNull(hierarchicalEntryViewModel.Entry.File);
      Assert.IsTrue(object.ReferenceEquals(hierarchicalEntryViewModel.Entry.File, 
                                           hierarchicalEntryViewModel.File));
      Assert.IsNull(hierarchicalEntryViewModel.Entry.Values);
      Assert.IsNull(hierarchicalEntryViewModel.Parent);
      Assert.IsNull(hierarchicalEntryViewModel.ParentPointerField);
      Assert.AreEqual<bool>(false, hierarchicalEntryViewModel.IsExpanded);
      Assert.AreEqual<bool>
          (false, ((TreeNodeViewModel)hierarchicalEntryViewModel).IsSelected);
      Assert.AreEqual<bool>
          (false, ((TreeNodeViewModel)hierarchicalEntryViewModel).IsExpanded);
      Assert.AreEqual<bool>
          (false, ((TreeNodeViewModel)hierarchicalEntryViewModel).AreChildrenLoaded);
      Assert.IsNull(((TreeNodeViewModel)hierarchicalEntryViewModel).Parent);
      Assert.IsNotNull(((TreeNodeViewModel)hierarchicalEntryViewModel).Children);
      Assert.AreEqual<bool>(false, ((ViewModel)hierarchicalEntryViewModel).IsActive);
      Assert.IsNull(((ViewModel)hierarchicalEntryViewModel).UIDispatcher);
      Assert.IsNotNull((object)hierarchicalEntryViewModelFactory);
      Assert.IsNotNull(hierarchicalEntryViewModelFactory.ParentPointers);
      Assert.IsNotNull(hierarchicalEntryViewModelFactory.ParentPointers.Comparer);
      Assert.AreEqual<int>
          (0, hierarchicalEntryViewModelFactory.ParentPointers.Count);
      Assert.IsNotNull(hierarchicalEntryViewModelFactory.ChildPointers);
      Assert.IsNotNull(hierarchicalEntryViewModelFactory.ChildPointers.Comparer);
      Assert.IsTrue(object.ReferenceEquals
                        (hierarchicalEntryViewModelFactory.ChildPointers.Comparer, 
                         hierarchicalEntryViewModelFactory.ParentPointers.Comparer));
      Assert.AreEqual<int>(0, hierarchicalEntryViewModelFactory.ChildPointers.Count);
    }
}
    }
}
