// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using VistA.Imaging.DataNavigator.Repositories;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using VistA.Imaging.DataNavigator.Repositories.Moles;
using Microsoft.Pex.Framework.Moles;
using VistA.Imaging.DataNavigator.ViewModels.Factories.Moles;

namespace VistA.Imaging.DataNavigator.ViewModels.Factories
{
    public partial class HierarchicalEntryViewModelFactoryTest
    {
[TestMethod]
[PexGeneratedBy(typeof(HierarchicalEntryViewModelFactoryTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void ConstructorThrowsArgumentNullException398()
{
    HierarchicalEntryViewModelFactory hierarchicalEntryViewModelFactory;
    hierarchicalEntryViewModelFactory =
      this.Constructor((IFilemanFileRepository)null, (IFilemanEntryRepository)null, 
                                                     (IHierarchicalEntryLoadViewModelFactory)null);
}
[TestMethod]
[PexGeneratedBy(typeof(HierarchicalEntryViewModelFactoryTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void ConstructorThrowsArgumentNullException348()
{
    SIFilemanFileRepository sIFilemanFileRepository;
    HierarchicalEntryViewModelFactory hierarchicalEntryViewModelFactory;
    sIFilemanFileRepository = new SIFilemanFileRepository();
    hierarchicalEntryViewModelFactory =
      this.Constructor((IFilemanFileRepository)sIFilemanFileRepository, 
                       (IFilemanEntryRepository)null, 
                       (IHierarchicalEntryLoadViewModelFactory)null);
}
[TestMethod]
[PexGeneratedBy(typeof(HierarchicalEntryViewModelFactoryTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void ConstructorThrowsArgumentNullException303()
{
    SIFilemanFileRepository sIFilemanFileRepository;
    SIFilemanEntryRepository sIFilemanEntryRepository;
    HierarchicalEntryViewModelFactory hierarchicalEntryViewModelFactory;
    sIFilemanFileRepository = new SIFilemanFileRepository();
    sIFilemanEntryRepository = new SIFilemanEntryRepository();
    hierarchicalEntryViewModelFactory =
      this.Constructor((IFilemanFileRepository)sIFilemanFileRepository, 
                       (IFilemanEntryRepository)sIFilemanEntryRepository, 
                       (IHierarchicalEntryLoadViewModelFactory)null);
}
[TestMethod]
[PexGeneratedBy(typeof(HierarchicalEntryViewModelFactoryTest))]
public void Constructor191()
{
    using (PexChooseBehavedBehavior.Setup())
    {
      SIFilemanFileRepository sIFilemanFileRepository;
      SIFilemanEntryRepository sIFilemanEntryRepository;
      SIHierarchicalEntryLoadViewModelFactory 
        sIHierarchicalEntryLoadViewModelFactory;
      HierarchicalEntryViewModelFactory hierarchicalEntryViewModelFactory;
      sIFilemanFileRepository = new SIFilemanFileRepository();
      sIFilemanEntryRepository = new SIFilemanEntryRepository();
      sIHierarchicalEntryLoadViewModelFactory =
        new SIHierarchicalEntryLoadViewModelFactory();
      hierarchicalEntryViewModelFactory =
        this.Constructor((IFilemanFileRepository)sIFilemanFileRepository, 
                         (IFilemanEntryRepository)sIFilemanEntryRepository, 
                         (IHierarchicalEntryLoadViewModelFactory)
                           sIHierarchicalEntryLoadViewModelFactory);
      Assert.IsNotNull((object)hierarchicalEntryViewModelFactory);
      Assert.IsNotNull(hierarchicalEntryViewModelFactory.ParentPointers);
      Assert.IsNotNull(hierarchicalEntryViewModelFactory.ParentPointers.Comparer);
      Assert.AreEqual<int>
          (0, hierarchicalEntryViewModelFactory.ParentPointers.Count);
      Assert.IsNotNull(hierarchicalEntryViewModelFactory.ChildPointers);
      Assert.IsNotNull(hierarchicalEntryViewModelFactory.ChildPointers.Comparer);
      Assert.IsTrue(object.ReferenceEquals
                        (hierarchicalEntryViewModelFactory.ChildPointers.Comparer, 
                         hierarchicalEntryViewModelFactory.ParentPointers.Comparer));
      Assert.AreEqual<int>(0, hierarchicalEntryViewModelFactory.ChildPointers.Count);
    }
}
    }
}
