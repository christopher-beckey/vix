// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.Practices.Prism.Regions;
using VistA.Imaging.DataNavigator.Repositories;
using VistA.Imaging.DataNavigator.ViewModels.Factories;
using VistA.Imaging.DataNavigator;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;
using VistA.Imaging.DataNavigator.Repositories.Moles;
using VistA.Imaging.DataNavigator.ViewModels.Factories.Moles;

namespace VistA.Imaging.DataNavigator.ViewModels
{
    public partial class DataNavigationViewModelTest
    {
[TestMethod]
[PexGeneratedBy(typeof(DataNavigationViewModelTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException409()
{
    try
    {
      DataNavigationViewModel dataNavigationViewModel;
      dataNavigationViewModel =
        this.Constructor01((IRegionManager)null, (IFilemanFileRepository)null, 
                           (IFilemanEntryRepository)null, 
                           (IHierarchicalEntryViewModelFactory)null, (DataNavigatorModule)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DataNavigationViewModelTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException667()
{
    try
    {
      RegionManager regionManager;
      DataNavigationViewModel dataNavigationViewModel;
      regionManager = RegionManagerFactory.Create();
      dataNavigationViewModel = this.Constructor01
                                    ((IRegionManager)regionManager, (IFilemanFileRepository)null, 
                                     (IFilemanEntryRepository)null, 
                                     (IHierarchicalEntryViewModelFactory)null, (DataNavigatorModule)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DataNavigationViewModelTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException406()
{
    try
    {
      RegionManager regionManager;
      SIFilemanFileRepository sIFilemanFileRepository;
      DataNavigationViewModel dataNavigationViewModel;
      regionManager = RegionManagerFactory.Create();
      sIFilemanFileRepository = new SIFilemanFileRepository();
      dataNavigationViewModel = this.Constructor01((IRegionManager)regionManager, 
                                                   (IFilemanFileRepository)sIFilemanFileRepository, 
                                                   (IFilemanEntryRepository)null, 
                                                   (IHierarchicalEntryViewModelFactory)null, (DataNavigatorModule)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DataNavigationViewModelTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException544()
{
    try
    {
      RegionManager regionManager;
      SIFilemanFileRepository sIFilemanFileRepository;
      SIFilemanEntryRepository sIFilemanEntryRepository;
      DataNavigationViewModel dataNavigationViewModel;
      regionManager = RegionManagerFactory.Create();
      sIFilemanFileRepository = new SIFilemanFileRepository();
      sIFilemanEntryRepository = new SIFilemanEntryRepository();
      dataNavigationViewModel = this.Constructor01((IRegionManager)regionManager, 
                                                   (IFilemanFileRepository)sIFilemanFileRepository, 
                                                   (IFilemanEntryRepository)sIFilemanEntryRepository, 
                                                   (IHierarchicalEntryViewModelFactory)null, (DataNavigatorModule)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(DataNavigationViewModelTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException447()
{
    try
    {
      RegionManager regionManager;
      SIFilemanFileRepository sIFilemanFileRepository;
      SIFilemanEntryRepository sIFilemanEntryRepository;
      SIHierarchicalEntryViewModelFactory sIHierarchicalEntryViewModelFactory;
      DataNavigationViewModel dataNavigationViewModel;
      regionManager = RegionManagerFactory.Create();
      sIFilemanFileRepository = new SIFilemanFileRepository();
      sIFilemanEntryRepository = new SIFilemanEntryRepository();
      sIHierarchicalEntryViewModelFactory =
        new SIHierarchicalEntryViewModelFactory();
      dataNavigationViewModel = this.Constructor01((IRegionManager)regionManager, 
                                                   (IFilemanFileRepository)sIFilemanFileRepository, 
                                                   (IFilemanEntryRepository)sIFilemanEntryRepository, 
                                                   (IHierarchicalEntryViewModelFactory)sIHierarchicalEntryViewModelFactory, 
                                                   (DataNavigatorModule)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
