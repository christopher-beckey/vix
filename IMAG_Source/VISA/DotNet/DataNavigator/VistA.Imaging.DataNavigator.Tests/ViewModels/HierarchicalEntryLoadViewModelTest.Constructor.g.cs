// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using VistA.Imaging.DataNavigator.Model;
using VistA.Imaging.DataNavigator.Repositories;
using VistA.Imaging.DataNavigator.ViewModels.Factories;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using VistA.Imaging.DataNavigator.Repositories.Moles;
using VistA.Imaging.DataNavigator.Model.Moles;
using Microsoft.Pex.Framework.Moles;
using VistA.Imaging.DataNavigator.ViewModels.Moles;
using VistA.Imaging.DataNavigator.ViewModels.Factories.Moles;
using ImagingClient.Infrastructure.Prism.Mvvm;

namespace VistA.Imaging.DataNavigator.ViewModels
{
    public partial class HierarchicalEntryLoadViewModelTest
    {
[TestMethod]
[PexGeneratedBy(typeof(HierarchicalEntryLoadViewModelTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void ConstructorThrowsArgumentNullException651()
{
    HierarchicalEntryLoadViewModel hierarchicalEntryLoadViewModel;
    hierarchicalEntryLoadViewModel =
      this.Constructor((FilemanFilePointer)null, (TreeNodeViewModel)null, 
                       (IFilemanEntryRepository)null, (IHierarchicalEntryViewModelFactory)null);
}
[TestMethod]
[PexGeneratedBy(typeof(HierarchicalEntryLoadViewModelTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void ConstructorThrowsArgumentNullException896()
{
    SIFilemanFileRepository sIFilemanFileRepository;
    FilemanFilePointer filemanFilePointer;
    HierarchicalEntryLoadViewModel hierarchicalEntryLoadViewModel;
    sIFilemanFileRepository = new SIFilemanFileRepository();
    FilemanField s0 = new FilemanField();
    s0.DataType = (string)null;
    s0.File = (FilemanFile)null;
    s0.IsIndexed = false;
    s0.Name = (string)null;
    s0.Number = (string)null;
    s0.Pointer = (FilemanFilePointer)null;
    s0.PointerFileNumber = (string)null;
    filemanFilePointer = FilemanFilePointerFactory.Create
                             ((IFilemanFileRepository)sIFilemanFileRepository, s0, "\0");
    hierarchicalEntryLoadViewModel =
      this.Constructor(filemanFilePointer, (TreeNodeViewModel)null, 
                       (IFilemanEntryRepository)null, (IHierarchicalEntryViewModelFactory)null);
}
[TestMethod]
[PexGeneratedBy(typeof(HierarchicalEntryLoadViewModelTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void ConstructorThrowsArgumentNullException823()
{
    SIFilemanFileRepository sIFilemanFileRepository;
    SFilemanFilePointer sFilemanFilePointer;
    HierarchicalEntryLoadViewModel hierarchicalEntryLoadViewModel;
    sIFilemanFileRepository = new SIFilemanFileRepository();
    FilemanField s0 = new FilemanField();
    s0.DataType = (string)null;
    s0.File = (FilemanFile)null;
    s0.IsIndexed = false;
    s0.Name = (string)null;
    s0.Number = (string)null;
    s0.Pointer = (FilemanFilePointer)null;
    s0.PointerFileNumber = (string)null;
    sFilemanFilePointer = new SFilemanFilePointer
                              ((IFilemanFileRepository)sIFilemanFileRepository, s0, "\0");
    hierarchicalEntryLoadViewModel = this.Constructor
                                         ((FilemanFilePointer)sFilemanFilePointer, (TreeNodeViewModel)null, 
                                          (IFilemanEntryRepository)null, (IHierarchicalEntryViewModelFactory)null);
}
[TestMethod]
[PexGeneratedBy(typeof(HierarchicalEntryLoadViewModelTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void ConstructorThrowsArgumentNullException405()
{
    using (PexChooseBehavedBehavior.Setup())
    {
      SIFilemanFileRepository sIFilemanFileRepository;
      FilemanFilePointer filemanFilePointer;
      STreeNodeViewModel sTreeNodeViewModel;
      HierarchicalEntryLoadViewModel hierarchicalEntryLoadViewModel;
      sIFilemanFileRepository = new SIFilemanFileRepository();
      FilemanField s0 = new FilemanField();
      s0.DataType = (string)null;
      s0.File = (FilemanFile)null;
      s0.IsIndexed = false;
      s0.Name = (string)null;
      s0.Number = (string)null;
      s0.Pointer = (FilemanFilePointer)null;
      s0.PointerFileNumber = (string)null;
      filemanFilePointer = FilemanFilePointerFactory.Create
                               ((IFilemanFileRepository)sIFilemanFileRepository, s0, "\u0100");
      sTreeNodeViewModel = new STreeNodeViewModel();
      hierarchicalEntryLoadViewModel =
        this.Constructor(filemanFilePointer, (TreeNodeViewModel)sTreeNodeViewModel, 
                         (IFilemanEntryRepository)null, (IHierarchicalEntryViewModelFactory)null);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(HierarchicalEntryLoadViewModelTest))]
[ExpectedException(typeof(ArgumentNullException))]
public void ConstructorThrowsArgumentNullException71()
{
    using (PexChooseBehavedBehavior.Setup())
    {
      SIFilemanFileRepository sIFilemanFileRepository;
      FilemanFilePointer filemanFilePointer;
      STreeNodeViewModel sTreeNodeViewModel;
      SIFilemanEntryRepository sIFilemanEntryRepository;
      HierarchicalEntryLoadViewModel hierarchicalEntryLoadViewModel;
      sIFilemanFileRepository = new SIFilemanFileRepository();
      FilemanField s0 = new FilemanField();
      s0.DataType = (string)null;
      s0.File = (FilemanFile)null;
      s0.IsIndexed = false;
      s0.Name = (string)null;
      s0.Number = (string)null;
      s0.Pointer = (FilemanFilePointer)null;
      s0.PointerFileNumber = (string)null;
      filemanFilePointer = FilemanFilePointerFactory.Create
                               ((IFilemanFileRepository)sIFilemanFileRepository, s0, "\u0100");
      sTreeNodeViewModel = new STreeNodeViewModel();
      sIFilemanEntryRepository = new SIFilemanEntryRepository();
      hierarchicalEntryLoadViewModel =
        this.Constructor(filemanFilePointer, (TreeNodeViewModel)sTreeNodeViewModel, 
                         (IFilemanEntryRepository)sIFilemanEntryRepository, 
                         (IHierarchicalEntryViewModelFactory)null);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(HierarchicalEntryLoadViewModelTest))]
public void Constructor141()
{
    using (PexChooseBehavedBehavior.Setup())
    {
      SIFilemanFileRepository sIFilemanFileRepository;
      FilemanFilePointer filemanFilePointer;
      STreeNodeViewModel sTreeNodeViewModel;
      SIFilemanEntryRepository sIFilemanEntryRepository;
      SIHierarchicalEntryViewModelFactory sIHierarchicalEntryViewModelFactory;
      HierarchicalEntryLoadViewModel hierarchicalEntryLoadViewModel;
      sIFilemanFileRepository = new SIFilemanFileRepository();
      FilemanField s0 = new FilemanField();
      s0.DataType = (string)null;
      s0.File = (FilemanFile)null;
      s0.IsIndexed = false;
      s0.Name = (string)null;
      s0.Number = (string)null;
      s0.Pointer = (FilemanFilePointer)null;
      s0.PointerFileNumber = (string)null;
      filemanFilePointer = FilemanFilePointerFactory.Create
                               ((IFilemanFileRepository)sIFilemanFileRepository, s0, "\u0100");
      sTreeNodeViewModel = new STreeNodeViewModel();
      sIFilemanEntryRepository = new SIFilemanEntryRepository();
      sIHierarchicalEntryViewModelFactory =
        new SIHierarchicalEntryViewModelFactory();
      hierarchicalEntryLoadViewModel =
        this.Constructor(filemanFilePointer, (TreeNodeViewModel)sTreeNodeViewModel, 
                         (IFilemanEntryRepository)sIFilemanEntryRepository, 
                         (IHierarchicalEntryViewModelFactory)sIHierarchicalEntryViewModelFactory);
      Assert.IsNotNull((object)hierarchicalEntryLoadViewModel);
      Assert.IsNotNull(hierarchicalEntryLoadViewModel.Pointer);
      Assert.IsNotNull(hierarchicalEntryLoadViewModel.Pointer.SourceField);
      Assert.AreEqual<string>
          ((string)null, hierarchicalEntryLoadViewModel.Pointer.SourceField.DataType);
      Assert.IsNull(hierarchicalEntryLoadViewModel.Pointer.SourceField.File);
      Assert.AreEqual<bool>
          (false, hierarchicalEntryLoadViewModel.Pointer.SourceField.IsIndexed);
      Assert.AreEqual<string>
          ((string)null, hierarchicalEntryLoadViewModel.Pointer.SourceField.Name);
      Assert.AreEqual<string>
          ((string)null, hierarchicalEntryLoadViewModel.Pointer.SourceField.Number);
      Assert.IsNull(hierarchicalEntryLoadViewModel.Pointer.SourceField.Pointer);
      Assert.AreEqual<string>((string)null, 
                              hierarchicalEntryLoadViewModel.Pointer.SourceField.PointerFileNumber);
      Assert.AreEqual<bool>(false, hierarchicalEntryLoadViewModel.IsSelected);
      Assert.AreEqual<bool>
          (false, ((TreeNodeViewModel)hierarchicalEntryLoadViewModel).IsSelected);
      Assert.AreEqual<bool>
          (false, ((TreeNodeViewModel)hierarchicalEntryLoadViewModel).IsExpanded);
      Assert.AreEqual<bool>(false, 
                            ((TreeNodeViewModel)hierarchicalEntryLoadViewModel).AreChildrenLoaded);
      Assert.IsNotNull(((TreeNodeViewModel)hierarchicalEntryLoadViewModel).Parent);
      Assert.AreEqual<bool>(false, 
                            ((TreeNodeViewModel)hierarchicalEntryLoadViewModel).Parent.IsSelected);
      Assert.AreEqual<bool>(false, 
                            ((TreeNodeViewModel)hierarchicalEntryLoadViewModel).Parent.IsExpanded);
      Assert.AreEqual<bool>
          (false, ((TreeNodeViewModel)hierarchicalEntryLoadViewModel).Parent
                    .AreChildrenLoaded);
      Assert.IsNull
          (((TreeNodeViewModel)hierarchicalEntryLoadViewModel).Parent.Parent);
      Assert.IsNotNull
          (((TreeNodeViewModel)hierarchicalEntryLoadViewModel).Parent.Children);
      Assert.AreEqual<bool>(false, 
                            ((TreeNodeViewModel)hierarchicalEntryLoadViewModel).Parent.IsActive);
      Assert.IsNull
          (((TreeNodeViewModel)hierarchicalEntryLoadViewModel).Parent.UIDispatcher);
      Assert.IsNotNull(((TreeNodeViewModel)hierarchicalEntryLoadViewModel).Children);
      Assert.AreEqual<bool>
          (false, ((ViewModel)hierarchicalEntryLoadViewModel).IsActive);
      Assert.IsNull(((ViewModel)hierarchicalEntryLoadViewModel).UIDispatcher);
    }
}
    }
}
