// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using VistA.Imaging.DataNavigator.Model.Moles;
using VistA.Imaging.DataNavigator.Repositories;
using VistA.Imaging.DataNavigator.Repositories.Moles;
using Microsoft.Pex.Engine.Exceptions;

namespace VistA.Imaging.DataNavigator.Model
{
    public partial class FilemanFieldTest
    {
[TestMethod]
[PexGeneratedBy(typeof(FilemanFieldTest))]
public void Constructor943()
{
    FilemanField filemanField;
    filemanField =
      this.Constructor("\u0100", "\u0100", false, (FilemanFilePointer)null);
    Assert.IsNotNull((object)filemanField);
    Assert.AreEqual<string>((string)null, filemanField.DataType);
    Assert.IsNull(filemanField.File);
    Assert.AreEqual<bool>(false, filemanField.IsIndexed);
    Assert.AreEqual<string>("\u0100", filemanField.Name);
    Assert.AreEqual<string>("\u0100", filemanField.Number);
    Assert.IsNull(filemanField.Pointer);
    Assert.AreEqual<string>((string)null, filemanField.PointerFileNumber);
}
[TestMethod]
[PexGeneratedBy(typeof(FilemanFieldTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException939()
{
    try
    {
      FilemanField filemanField;
      filemanField =
        this.Constructor("\u0100", (string)null, false, (FilemanFilePointer)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(FilemanFieldTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException831()
{
    try
    {
      FilemanField filemanField;
      filemanField =
        this.Constructor("", (string)null, false, (FilemanFilePointer)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(FilemanFieldTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException836()
{
    try
    {
      FilemanField filemanField;
      filemanField = this.Constructor
                         ((string)null, (string)null, false, (FilemanFilePointer)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(FilemanFieldTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException564()
{
    try
    {
      FilemanField filemanField;
      filemanField =
        this.Constructor("\0", (string)null, false, (FilemanFilePointer)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(FilemanFieldTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException175()
{
    try
    {
      FilemanField filemanField;
      filemanField =
        this.Constructor("\u0089", "\t", false, (FilemanFilePointer)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
