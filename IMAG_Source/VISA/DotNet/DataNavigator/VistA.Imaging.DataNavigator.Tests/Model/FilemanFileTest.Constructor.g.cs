// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace VistA.Imaging.DataNavigator.Model
{
    public partial class FilemanFileTest
    {
[TestMethod]
[PexGeneratedBy(typeof(FilemanFileTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException862()
{
    try
    {
      FilemanFile filemanFile;
      filemanFile = this.Constructor("", (string)null, (FilemanField[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(FilemanFileTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException868()
{
    try
    {
      FilemanFile filemanFile;
      filemanFile = this.Constructor("\0", (string)null, (FilemanField[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(FilemanFileTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException885()
{
    try
    {
      FilemanFile filemanFile;
      filemanFile = this.Constructor("\u0100", "\u0100", (FilemanField[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(FilemanFileTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException851()
{
    try
    {
      FilemanFile filemanFile;
      FilemanField[] filemanFields = new FilemanField[0];
      filemanFile = this.Constructor("\u0100", "\u0100", filemanFields);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(FilemanFileTest))]
public void Constructor934()
{
    FilemanFile filemanFile;
    FilemanField[] filemanFields = new FilemanField[1];
    filemanFile = this.Constructor("\u0100", "\u0100", filemanFields);
    Assert.IsNotNull((object)filemanFile);
    Assert.AreEqual<string>("\u0100", filemanFile.Name);
    Assert.AreEqual<string>("\u0100", filemanFile.Number);
    Assert.IsNotNull(filemanFile.Fields);
    Assert.AreEqual<int>(1, filemanFile.Fields.Length);
    Assert.IsNull((object)(filemanFile.Fields[0]));
}
[TestMethod]
[PexGeneratedBy(typeof(FilemanFileTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException874()
{
    try
    {
      FilemanFile filemanFile;
      filemanFile =
        this.Constructor((string)null, (string)null, (FilemanField[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(FilemanFileTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException791()
{
    try
    {
      FilemanFile filemanFile;
      filemanFile = this.Constructor("\u0100", (string)null, (FilemanField[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(FilemanFileTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException534()
{
    try
    {
      FilemanFile filemanFile;
      filemanFile = this.Constructor("\u0100", "\0\0", (FilemanField[])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
