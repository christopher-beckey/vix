<!DOCTYPE html PUBLIC "-// W3C// DTD XHTML 1.0 Strict// EN" "http:// www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html><head><title>Coverage Report</title><style type="text/css">html {font-family: sans-serif; margin: 20px; font-size: 0.9em; background-color: #f5f5f5;} h1 {font-size: 1.2em; font-weight: bold; margin: 20px 0px 15px 0px; padding: 0px;} h2 {font-size: 1.0em; font-weight: bold; margin: 10px 0px 15px 0px;padding: 0px;} th {text-align: left;} a {color: #cc0000; text-decoration: none;} a:hover {color: #000000; text-decoration: none;} .container {margin: auto; width: 960px; border: solid 1px #a7bac5; padding: 0px 20px 20px 20px; background-color: #ffffff;} .overview { border: solid 1px #a7bac5; border-collapse: collapse;} .overview th { border: solid 1px #a7bac5; border-collapse: collapse; padding: 2px 5px 2px 5px; background-color: #d2dbe1;} .overview td { border: solid 1px #a7bac5; border-collapse: collapse; padding: 2px 5px 2px 5px;} .coverage { border: solid 1px #a7bac5; border-collapse: collapse; font-size: 5px;} .coverage td { padding: 0px; } .right {text-align: right; padding-right: 8px;} .light {color: #888888;} .green {background-color: #00ff21;} .red {background-color: #ff0000;} .gray {background-color: #dcdcdc;} .footer {font-size: 0.7em; text-align: center; margin-top: 35px;} </style></head><body><div class="container"><h1>Summary</h1><table class="overview"><tr><th>Assembly:</th><td>NMock2</td></tr><tr><th>Class:</th><td>NMock2.Monitoring.InterfaceOnlyMockObjectFactoryTypeId</td></tr><tr><th valign="top">File(s):</th><td>d:\Projects\NMockXP\SF_SVN\trunk\src\NMock2\Monitoring\InterfaceOnlyMockObjectFactory.cs<br /></td></tr><tr><th>Coverage:</th><td>0 %</td></tr><tr><th>Covered lines:</th><td>0</td></tr><tr><th>Coverable lines:</th><td>14</td></tr><tr><th>Total lines:</th><td>386</td></tr></table><h1>File(s)</h1><h2>d:\Projects\NMockXP\SF_SVN\trunk\src\NMock2\Monitoring\InterfaceOnlyMockObjectFactory.cs</h2><table><tr><th></th><th class="right">&nbsp;#</th><th class="right">Line</th><th>Content</th></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>1</code></td><td class="light"><code>//-----------------------------------------------------------------------</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>2</code></td><td class="light"><code>//&nbsp;&lt;copyright&nbsp;file="InterfaceOnlyMockObjectFactory.cs"&nbsp;company="NMock2"&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>3</code></td><td class="light"><code>//</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>4</code></td><td class="light"><code>//&nbsp;&nbsp;&nbsp;http://www.sourceforge.net/projects/NMock2</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>5</code></td><td class="light"><code>//</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>6</code></td><td class="light"><code>//&nbsp;&nbsp;&nbsp;Licensed&nbsp;under&nbsp;the&nbsp;Apache&nbsp;License,&nbsp;Version&nbsp;2.0&nbsp;(the&nbsp;"License");</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>7</code></td><td class="light"><code>//&nbsp;&nbsp;&nbsp;you&nbsp;may&nbsp;not&nbsp;use&nbsp;this&nbsp;file&nbsp;except&nbsp;in&nbsp;compliance&nbsp;with&nbsp;the&nbsp;License.</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>8</code></td><td class="light"><code>//&nbsp;&nbsp;&nbsp;You&nbsp;may&nbsp;obtain&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;License&nbsp;at</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>9</code></td><td class="light"><code>//</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>10</code></td><td class="light"><code>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.apache.org/licenses/LICENSE-2.0</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>11</code></td><td class="light"><code>//</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>12</code></td><td class="light"><code>//&nbsp;&nbsp;&nbsp;Unless&nbsp;required&nbsp;by&nbsp;applicable&nbsp;law&nbsp;or&nbsp;agreed&nbsp;to&nbsp;in&nbsp;writing,&nbsp;software</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>13</code></td><td class="light"><code>//&nbsp;&nbsp;&nbsp;distributed&nbsp;under&nbsp;the&nbsp;License&nbsp;is&nbsp;distributed&nbsp;on&nbsp;an&nbsp;"AS&nbsp;IS"&nbsp;BASIS,</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>14</code></td><td class="light"><code>//&nbsp;&nbsp;&nbsp;WITHOUT&nbsp;WARRANTIES&nbsp;OR&nbsp;CONDITIONS&nbsp;OF&nbsp;ANY&nbsp;KIND,&nbsp;either&nbsp;express&nbsp;or&nbsp;implied.</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>15</code></td><td class="light"><code>//&nbsp;&nbsp;&nbsp;See&nbsp;the&nbsp;License&nbsp;for&nbsp;the&nbsp;specific&nbsp;language&nbsp;governing&nbsp;permissions&nbsp;and</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>16</code></td><td class="light"><code>//&nbsp;&nbsp;&nbsp;limitations&nbsp;under&nbsp;the&nbsp;License.</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>17</code></td><td class="light"><code>//&nbsp;&lt;/copyright&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>18</code></td><td class="light"><code>//-----------------------------------------------------------------------</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>19</code></td><td class="light"><code>namespace&nbsp;NMock2.Monitoring</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>20</code></td><td class="light"><code>{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>21</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;System;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>22</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;System.Collections;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>23</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;System.Collections.Generic;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>24</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;System.Reflection;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>25</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;System.Reflection.Emit;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>26</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;using&nbsp;NMock2.Internal;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>27</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>28</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;summary&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>29</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;Class&nbsp;that&nbsp;creates&nbsp;mocks&nbsp;for&nbsp;interfaces&nbsp;only.&nbsp;This&nbsp;was&nbsp;the&nbsp;original&nbsp;implementation</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>30</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;of&nbsp;NMock2&nbsp;mocks&nbsp;used&nbsp;before&nbsp;the&nbsp;Castle&nbsp;proxies&nbsp;were&nbsp;introduced.</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>31</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;/summary&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>32</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;class&nbsp;InterfaceOnlyMockObjectFactory&nbsp;:&nbsp;IMockObjectFactory</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>33</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>34</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;readonly&nbsp;Hashtable&nbsp;createdTypes&nbsp;=&nbsp;new&nbsp;Hashtable();</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>35</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;readonly&nbsp;MultiInterfaceFactory&nbsp;facadeFactory&nbsp;=&nbsp;new&nbsp;MultiInterfaceFactory("Mocks");</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>36</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;readonly&nbsp;ModuleBuilder&nbsp;moduleBuilder;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>37</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>38</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;summary&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>39</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;Initializes&nbsp;a&nbsp;new&nbsp;instance&nbsp;of&nbsp;the&nbsp;&lt;see&nbsp;cref="InterfaceOnlyMockObjectFactory"/&gt;&nbsp;class.</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>40</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;/summary&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>41</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;InterfaceOnlyMockObjectFactory()</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>42</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>43</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;name&nbsp;=&nbsp;"MockObjects";</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>44</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AssemblyName&nbsp;name1&nbsp;=&nbsp;new&nbsp;AssemblyName();</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>45</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name1.Name&nbsp;=&nbsp;name;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>46</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.moduleBuilder&nbsp;=</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>47</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AppDomain.CurrentDomain.DefineDynamicAssembly(</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>48</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name1,&nbsp;AssemblyBuilderAccess.Run).DefineDynamicModule(name);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>49</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>50</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>51</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;summary&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>52</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;Returns&nbsp;an&nbsp;array&nbsp;of&nbsp;&lt;see&nbsp;langword="string"/&gt;s&nbsp;that&nbsp;represent</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>53</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;the&nbsp;names&nbsp;of&nbsp;the&nbsp;generic&nbsp;type&nbsp;parameter.</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>54</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;/summary&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>55</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name="args"&gt;The&nbsp;parameter&nbsp;info&nbsp;array.&lt;/param&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>56</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;returns&gt;An&nbsp;array&nbsp;containing&nbsp;parameter&nbsp;names.&lt;/returns&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>57</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;string[]&nbsp;GetGenericParameterNames(Type[]&nbsp;args)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>58</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>59</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string[]&nbsp;names&nbsp;=&nbsp;new&nbsp;string[args.Length];</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>60</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;args.Length;&nbsp;i++)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>61</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>62</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;names[i]&nbsp;=&nbsp;args[i].Name;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>63</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>64</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>65</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;names;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>66</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>67</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>68</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;summary&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>69</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;Returns&nbsp;an&nbsp;array&nbsp;of&nbsp;parameter&nbsp;&lt;see&nbsp;cref="System.Type"/&gt;s&nbsp;for&nbsp;the</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>70</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;specified&nbsp;parameter&nbsp;info&nbsp;array.</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>71</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;/summary&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>72</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name="args"&gt;The&nbsp;parameter&nbsp;info&nbsp;array.&lt;/param&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>73</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;returns&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>74</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;An&nbsp;array&nbsp;containing&nbsp;parameter&nbsp;&lt;see&nbsp;cref="System.Type"/&gt;s.</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>75</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;/returns&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>76</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;Type[]&nbsp;GetParameterTypes(ParameterInfo[]&nbsp;args)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>77</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>78</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type[]&nbsp;types&nbsp;=&nbsp;new&nbsp;Type[args.Length];</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>79</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;args.Length;&nbsp;i++)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>80</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>81</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;types[i]&nbsp;=&nbsp;args[i].ParameterType;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>82</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>83</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>84</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;types;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>85</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>86</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>87</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#region&nbsp;IMockObjectFactory&nbsp;Members</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>88</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;summary&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>89</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;Creates&nbsp;a&nbsp;mock&nbsp;of&nbsp;the&nbsp;specified&nbsp;type(s).</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>90</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;/summary&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>91</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name="mockery"&gt;The&nbsp;mockery&nbsp;used&nbsp;to&nbsp;create&nbsp;this&nbsp;mock&nbsp;instance.&lt;/param&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>92</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name="typesToMock"&gt;The&nbsp;type(s)&nbsp;to&nbsp;include&nbsp;in&nbsp;the&nbsp;mock.&lt;/param&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>93</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name="name"&gt;The&nbsp;name&nbsp;to&nbsp;use&nbsp;for&nbsp;the&nbsp;mock&nbsp;instance.&lt;/param&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>94</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name="mockStyle"&gt;The&nbsp;behaviour&nbsp;of&nbsp;the&nbsp;mock&nbsp;instance&nbsp;when&nbsp;first&nbsp;created.&lt;/param&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>95</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name="constructorArgs"&gt;Constructor&nbsp;arguments&nbsp;for&nbsp;the&nbsp;class&nbsp;to&nbsp;be&nbsp;mocked.&nbsp;Only&nbsp;valid&nbsp;if&nbsp;mock</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>96</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;returns&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>97</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;A&nbsp;mock&nbsp;instance&nbsp;of&nbsp;the&nbsp;specified&nbsp;type(s).</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>98</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;/returns&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>99</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;object&nbsp;CreateMock(Mockery&nbsp;mockery,&nbsp;CompositeType&nbsp;typesToMock,&nbsp;string&nbsp;name,&nbsp;MockStyle&nbsp;mockStyle,</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>100</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>101</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type&nbsp;mockedType&nbsp;=&nbsp;typesToMock.PrimaryType;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>102</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>103</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(mockedType.IsClass)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>104</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>105</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NotSupportedException(this.GetType().Name&nbsp;+&nbsp;"&nbsp;does&nbsp;not&nbsp;support&nbsp;mocking&nbsp;of&nbsp;classes.")</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>106</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>107</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>108</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(typesToMock.AdditionalInterfaceTypes.Length&nbsp;&gt;&nbsp;0)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>109</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>110</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NotSupportedException(this.GetType().Name&nbsp;+&nbsp;"&nbsp;does&nbsp;not&nbsp;support&nbsp;mocking&nbsp;of&nbsp;multiple&nbsp;i</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>111</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>112</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>113</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type&nbsp;facadeType&nbsp;=&nbsp;facadeFactory.GetType(typeof(IMockObject),&nbsp;mockedType);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>114</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>115</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MockObject&nbsp;mockObject&nbsp;=</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>116</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Activator.CreateInstance(</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>117</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.GetMockedType(</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>118</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Id(new&nbsp;Type[]&nbsp;{&nbsp;mockedType,&nbsp;typeof(IMockObject)&nbsp;}),&nbsp;mockedType),</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>119</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;object[]&nbsp;{&nbsp;mockery,&nbsp;mockedType,&nbsp;name&nbsp;})</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>120</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;as&nbsp;MockObject;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>121</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>122</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProxyInvokableAdapter&nbsp;adapter&nbsp;=</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>123</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;ProxyInvokableAdapter(</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>124</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facadeType,</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>125</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;ProxiedObjectIdentity(mockObject,&nbsp;new&nbsp;Invoker(typeof(IMockObject),&nbsp;mockObject,&nbsp;mockObj</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>126</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>127</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;adapter.GetTransparentProxy();</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>128</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>129</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endregion</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>130</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>131</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;bool&nbsp;AllTypes(Type&nbsp;type,&nbsp;object&nbsp;criteria)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>132</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>133</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>134</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>135</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>136</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;void&nbsp;BuildAllInterfaceMethods(</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>137</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type&nbsp;mockedType,&nbsp;TypeBuilder&nbsp;typeBuilder)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>138</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>139</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type[]&nbsp;typeArray1&nbsp;=&nbsp;mockedType.FindInterfaces(AllTypes,&nbsp;null);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>140</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;(Type&nbsp;type1&nbsp;in&nbsp;typeArray1)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>141</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>142</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BuildInterfaceMethods(typeBuilder,&nbsp;type1);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>143</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>144</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>145</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BuildInterfaceMethods(typeBuilder,&nbsp;mockedType);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>146</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>147</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>148</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;void&nbsp;BuildConstructor(TypeBuilder&nbsp;typeBuilder)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>149</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>150</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type[]&nbsp;typeArray1&nbsp;=</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>151</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;Type[]&nbsp;{&nbsp;typeof(Mockery),&nbsp;typeof(Type),&nbsp;typeof(string)&nbsp;};</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>152</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>153</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ILGenerator&nbsp;generator1&nbsp;=</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>154</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typeBuilder.DefineConstructor(</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>155</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MethodAttributes.Public,&nbsp;CallingConventions.HasThis,&nbsp;typeArray1).</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>156</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetILGenerator();</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>157</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>158</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ConstructorInfo&nbsp;info1&nbsp;=</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>159</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typeof(MockObject).GetConstructor(</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>160</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BindingFlags.NonPublic&nbsp;|&nbsp;BindingFlags.Instance,&nbsp;null,&nbsp;typeArray1,&nbsp;null);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>161</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>162</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;generator1.Emit(OpCodes.Ldarg_0);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>163</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;generator1.Emit(OpCodes.Ldarg_1);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>164</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;generator1.Emit(OpCodes.Ldarg_2);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>165</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;generator1.Emit(OpCodes.Ldarg_3);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>166</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;generator1.Emit(OpCodes.Call,&nbsp;info1);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>167</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;generator1.Emit(OpCodes.Ret);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>168</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>169</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>170</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;void&nbsp;BuildInterfaceMethods(TypeBuilder&nbsp;typeBuilder,&nbsp;Type&nbsp;mockedType)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>171</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>172</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typeBuilder.AddInterfaceImplementation(mockedType);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>173</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MethodInfo[]&nbsp;infoArray1&nbsp;=&nbsp;mockedType.GetMethods();</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>174</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;(MethodInfo&nbsp;info1&nbsp;in&nbsp;infoArray1)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>175</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>176</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GenerateMethodBody(typeBuilder,&nbsp;info1);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>177</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>178</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>179</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>180</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;void&nbsp;EmitReferenceMethodBody(ILGenerator&nbsp;gen)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>181</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>182</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gen.Emit(OpCodes.Ldnull);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>183</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gen.Emit(OpCodes.Ret);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>184</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>185</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>186</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;void&nbsp;EmitValueMethodBody(MethodInfo&nbsp;method,&nbsp;ILGenerator&nbsp;gen)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>187</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>188</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gen.DeclareLocal(method.ReturnType);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>189</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gen.Emit(OpCodes.Ldloc_0);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>190</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gen.Emit(OpCodes.Ret);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>191</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>192</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>193</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;void&nbsp;GenerateMethodBody(TypeBuilder&nbsp;typeBuilder,&nbsp;MethodInfo&nbsp;method)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>194</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>195</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MethodBuilder&nbsp;methodBuilder&nbsp;=&nbsp;DefineMethod(typeBuilder,&nbsp;method,&nbsp;false);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>196</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DefineParameters(methodBuilder,&nbsp;method);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>197</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ILGenerator&nbsp;generator1&nbsp;=&nbsp;methodBuilder.GetILGenerator();</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>198</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>199</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;////ILGenerator&nbsp;generator1&nbsp;=&nbsp;PrepareMethodGenerator(typeBuilder,&nbsp;method);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>200</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;generator1.Emit(OpCodes.Ldarg_0);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>201</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>202</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(method.ReturnType&nbsp;==&nbsp;null)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>203</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>204</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;generator1.Emit(OpCodes.Ret);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>205</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>206</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>207</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(method.ReturnType.IsValueType)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>208</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>209</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EmitValueMethodBody(method,&nbsp;generator1);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>210</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>211</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>212</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>213</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EmitReferenceMethodBody(generator1);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>214</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>215</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>216</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>217</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;TypeId&nbsp;Id(params&nbsp;Type[]&nbsp;types)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>218</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>219</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;TypeId(types);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>220</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>221</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>222</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;summary&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>223</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;Defines&nbsp;proxy&nbsp;method&nbsp;for&nbsp;the&nbsp;target&nbsp;object.</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>224</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;/summary&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>225</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name="typeBuilder"&gt;The&nbsp;type&nbsp;builder.&lt;/param&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>226</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name="method"&gt;The&nbsp;method&nbsp;to&nbsp;proxy.&lt;/param&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>227</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name="explicitImplementation"&gt;&lt;see&nbsp;langword="true"/&gt;&nbsp;if&nbsp;the&nbsp;supplied&nbsp;&lt;paramref&nbsp;name="method</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>228</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;implemented&nbsp;explicitly;&nbsp;otherwise&nbsp;&lt;see&nbsp;langword="false"/&gt;.&lt;/param&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>229</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;returns&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>230</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;The&nbsp;&lt;see&nbsp;cref="System.Reflection.Emit.MethodBuilder"/&gt;&nbsp;for&nbsp;the&nbsp;proxy&nbsp;method.</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>231</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;/returns&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>232</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;remarks&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>233</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;Original&nbsp;code&nbsp;from&nbsp;Spring.Net&nbsp;http://springnet.cvs.sourceforge.net/springnet/Spring.Net/src/Spring</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>234</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;/remarks&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>235</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;MethodBuilder&nbsp;DefineMethod(</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>236</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TypeBuilder&nbsp;typeBuilder,</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>237</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MethodInfo&nbsp;method,</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>238</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;explicitImplementation)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>239</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>240</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;name&nbsp;=&nbsp;method.Name;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>241</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MethodAttributes&nbsp;attributes&nbsp;=&nbsp;MethodAttributes.Public&nbsp;|&nbsp;MethodAttributes.ReuseSlot</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>242</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;MethodAttributes.HideBySig&nbsp;|&nbsp;MethodAttributes.Virtual;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>243</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>244</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(method.IsSpecialName)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>245</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>246</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;attributes&nbsp;|=&nbsp;MethodAttributes.SpecialName;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>247</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>248</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>249</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MethodBuilder&nbsp;methodBuilder&nbsp;=&nbsp;typeBuilder.DefineMethod(</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>250</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name,</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>251</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;attributes,</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>252</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method.CallingConvention,</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>253</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method.ReturnType,</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>254</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetParameterTypes(method.GetParameters()));</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>255</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>256</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(method.IsGenericMethodDefinition)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>257</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>258</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type[]&nbsp;genericArguments&nbsp;=&nbsp;method.GetGenericArguments();</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>259</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>260</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;define&nbsp;generic&nbsp;parameters</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>261</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GenericTypeParameterBuilder[]&nbsp;gtpBuilders&nbsp;=</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>262</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;methodBuilder.DefineGenericParameters(GetGenericParameterNames(genericArguments));</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>263</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>264</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;define&nbsp;constraints&nbsp;for&nbsp;each&nbsp;generic&nbsp;parameter</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>265</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;genericArguments.Length;&nbsp;i++)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>266</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>267</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gtpBuilders[i].SetGenericParameterAttributes(genericArguments[i].GenericParameterAttribute</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>268</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>269</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type[]&nbsp;constraints&nbsp;=&nbsp;genericArguments[i].GetGenericParameterConstraints();</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>270</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Type&gt;&nbsp;interfaces&nbsp;=&nbsp;new&nbsp;List&lt;Type&gt;(constraints.Length);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>271</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;(Type&nbsp;constraint&nbsp;in&nbsp;constraints)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>272</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>273</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(constraint.IsClass)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>274</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>275</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gtpBuilders[i].SetBaseTypeConstraint(constraint);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>276</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>277</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>278</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>279</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;interfaces.Add(constraint);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>280</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>281</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>282</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>283</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gtpBuilders[i].SetInterfaceConstraints(interfaces.ToArray());</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>284</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>285</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>286</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>287</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;methodBuilder;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>288</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>289</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>290</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;summary&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>291</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;Defines&nbsp;method&nbsp;parameters&nbsp;based&nbsp;on&nbsp;proxied&nbsp;method&nbsp;metadata.</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>292</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;/summary&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>293</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name="methodBuilder"&gt;The&nbsp;&lt;see&nbsp;cref="System.Reflection.Emit.MethodBuilder"/&gt;&nbsp;to&nbsp;use.&lt;/param&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>294</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name="method"&gt;The&nbsp;method&nbsp;to&nbsp;proxy.&lt;/param&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>295</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;void&nbsp;DefineParameters(MethodBuilder&nbsp;methodBuilder,&nbsp;MethodInfo&nbsp;method)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>296</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>297</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;n&nbsp;=&nbsp;1;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>298</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;(ParameterInfo&nbsp;param&nbsp;in&nbsp;method.GetParameters())</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>299</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>300</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ParameterBuilder&nbsp;pb&nbsp;=&nbsp;methodBuilder.DefineParameter(n,&nbsp;param.Attributes,&nbsp;param.Name);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>301</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n++;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>302</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>303</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>304</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>305</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Type&nbsp;CreateType(string&nbsp;typeName,&nbsp;Type&nbsp;mockedType)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>306</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>307</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TypeBuilder&nbsp;builder1&nbsp;=</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>308</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.moduleBuilder.DefineType(</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>309</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typeName,</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>310</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TypeAttributes.Public,</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>311</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typeof(MockObject),</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>312</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;Type[]&nbsp;{&nbsp;mockedType&nbsp;});</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>313</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BuildConstructor(builder1);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>314</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BuildAllInterfaceMethods(mockedType,&nbsp;builder1);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>315</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;builder1.CreateType();</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>316</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>317</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>318</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Type&nbsp;GetMockedType(TypeId&nbsp;id1,&nbsp;Type&nbsp;mockedType)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>319</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>320</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type&nbsp;type1;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>321</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(createdTypes.ContainsKey(id1))</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>322</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>323</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type1&nbsp;=&nbsp;(Type)&nbsp;createdTypes[id1];</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>324</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>325</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>326</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>327</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;createdTypes[id1]&nbsp;=</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>328</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type1&nbsp;=&nbsp;this.CreateType("MockObjectType"&nbsp;+&nbsp;(createdTypes.Count&nbsp;+&nbsp;1),&nbsp;mockedType);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>329</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>330</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>331</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;type1;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>332</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>333</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>334</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#region&nbsp;Nested&nbsp;type:&nbsp;TypeId</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>335</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>336</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;class&nbsp;TypeId</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>337</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>338</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;readonly&nbsp;Type[]&nbsp;types;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>339</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>340</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;summary&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>341</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;Initializes&nbsp;a&nbsp;new&nbsp;instance&nbsp;of&nbsp;the&nbsp;&lt;see&nbsp;cref="TypeId"/&gt;&nbsp;class.</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>342</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;/summary&gt;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>343</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;///&nbsp;&lt;param&nbsp;name="types"&gt;The&nbsp;types.&lt;/param&gt;</code></td></tr><tr><td class="red">&nbsp;</td><td class="right">0</td><td class="right"><code>344</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;TypeId(params&nbsp;Type[]&nbsp;types)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>345</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="red">&nbsp;</td><td class="right">0</td><td class="right"><code>346</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.types&nbsp;=&nbsp;types;</code></td></tr><tr><td class="red">&nbsp;</td><td class="right">0</td><td class="right"><code>347</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>348</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>349</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;override&nbsp;bool&nbsp;Equals(object&nbsp;obj)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>350</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="red">&nbsp;</td><td class="right">0</td><td class="right"><code>351</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(obj&nbsp;is&nbsp;TypeId)&nbsp;&&&nbsp;this.ContainsSameTypesAs((TypeId)&nbsp;obj);</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>352</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>353</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>354</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;override&nbsp;int&nbsp;GetHashCode()</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>355</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="red">&nbsp;</td><td class="right">0</td><td class="right"><code>356</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;num1&nbsp;=&nbsp;0;</code></td></tr><tr><td class="red">&nbsp;</td><td class="right">0</td><td class="right"><code>357</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;(Type&nbsp;type1&nbsp;in&nbsp;this.types)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>358</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="red">&nbsp;</td><td class="right">0</td><td class="right"><code>359</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num1&nbsp;^=&nbsp;type1.GetHashCode();</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>360</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>361</code></td><td class="light"></td></tr><tr><td class="red">&nbsp;</td><td class="right">0</td><td class="right"><code>362</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;num1;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>363</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>364</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>365</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;bool&nbsp;ContainsSameTypesAs(TypeId&nbsp;other)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>366</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="red">&nbsp;</td><td class="right">0</td><td class="right"><code>367</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(other.types.Length&nbsp;!=&nbsp;this.types.Length)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>368</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="red">&nbsp;</td><td class="right">0</td><td class="right"><code>369</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>370</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>371</code></td><td class="light"></td></tr><tr><td class="red">&nbsp;</td><td class="right">0</td><td class="right"><code>372</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;num1&nbsp;=&nbsp;0;&nbsp;num1&nbsp;&lt;&nbsp;this.types.Length;&nbsp;num1++)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>373</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="red">&nbsp;</td><td class="right">0</td><td class="right"><code>374</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Array.IndexOf(other.types,&nbsp;this.types[num1])&nbsp;&lt;&nbsp;0)</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>375</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr><tr><td class="red">&nbsp;</td><td class="right">0</td><td class="right"><code>376</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>377</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>378</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>379</code></td><td class="light"></td></tr><tr><td class="red">&nbsp;</td><td class="right">0</td><td class="right"><code>380</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>381</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>382</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>383</code></td><td class="light"></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>384</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#endregion</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>385</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr><tr><td class="gray">&nbsp;</td><td class="right"></td><td class="right"><code>386</code></td><td class="light"><code>}</code></td></tr></table><div class="footer">Generated by: ReportGenerator 0.5.0.0<br />20.12.2009 - 15:19:00<br /><a href="http:// www.palmmedia.de">www.palmmedia.de</a></div></div></body></html>