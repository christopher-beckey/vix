//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace VistaCommon.SiteService {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ImagingExchangeSiteServiceSoap", Namespace="http://vistaweb.med.va.gov/webservices/ImagingExchangeSiteService")]
    public partial class ImagingExchangeSiteService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getVISNOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSitesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSiteOperationCompleted;
        
        private System.Threading.SendOrPostCallback getImagingExchangeSitesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ImagingExchangeSiteService() {
            this.Url = global::VistaCommon.Properties.Settings.Default.VistaCommon_SiteService_ImagingExchangeSiteService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getVISNCompletedEventHandler getVISNCompleted;
        
        /// <remarks/>
        public event getSitesCompletedEventHandler getSitesCompleted;
        
        /// <remarks/>
        public event getSiteCompletedEventHandler getSiteCompleted;
        
        /// <remarks/>
        public event getImagingExchangeSitesCompletedEventHandler getImagingExchangeSitesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://vistaweb.med.va.gov/webservices/ImagingExchangeSiteService/getVISN", RequestNamespace="http://vistaweb.med.va.gov/webservices/ImagingExchangeSiteService", ResponseNamespace="http://vistaweb.med.va.gov/webservices/ImagingExchangeSiteService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ImagingExchangeRegionTO getVISN(string regionID) {
            object[] results = this.Invoke("getVISN", new object[] {
                        regionID});
            return ((ImagingExchangeRegionTO)(results[0]));
        }
        
        /// <remarks/>
        public void getVISNAsync(string regionID) {
            this.getVISNAsync(regionID, null);
        }
        
        /// <remarks/>
        public void getVISNAsync(string regionID, object userState) {
            if ((this.getVISNOperationCompleted == null)) {
                this.getVISNOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVISNOperationCompleted);
            }
            this.InvokeAsync("getVISN", new object[] {
                        regionID}, this.getVISNOperationCompleted, userState);
        }
        
        private void OngetVISNOperationCompleted(object arg) {
            if ((this.getVISNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVISNCompleted(this, new getVISNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://vistaweb.med.va.gov/webservices/ImagingExchangeSiteService/getSites", RequestNamespace="http://vistaweb.med.va.gov/webservices/ImagingExchangeSiteService", ResponseNamespace="http://vistaweb.med.va.gov/webservices/ImagingExchangeSiteService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ImagingExchangeSiteTO[] getSites(string siteIDs) {
            object[] results = this.Invoke("getSites", new object[] {
                        siteIDs});
            return ((ImagingExchangeSiteTO[])(results[0]));
        }
        
        /// <remarks/>
        public void getSitesAsync(string siteIDs) {
            this.getSitesAsync(siteIDs, null);
        }
        
        /// <remarks/>
        public void getSitesAsync(string siteIDs, object userState) {
            if ((this.getSitesOperationCompleted == null)) {
                this.getSitesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSitesOperationCompleted);
            }
            this.InvokeAsync("getSites", new object[] {
                        siteIDs}, this.getSitesOperationCompleted, userState);
        }
        
        private void OngetSitesOperationCompleted(object arg) {
            if ((this.getSitesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSitesCompleted(this, new getSitesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://vistaweb.med.va.gov/webservices/ImagingExchangeSiteService/getSite", RequestNamespace="http://vistaweb.med.va.gov/webservices/ImagingExchangeSiteService", ResponseNamespace="http://vistaweb.med.va.gov/webservices/ImagingExchangeSiteService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ImagingExchangeSiteTO getSite(string siteID) {
            object[] results = this.Invoke("getSite", new object[] {
                        siteID});
            return ((ImagingExchangeSiteTO)(results[0]));
        }
        
        /// <remarks/>
        public void getSiteAsync(string siteID) {
            this.getSiteAsync(siteID, null);
        }
        
        /// <remarks/>
        public void getSiteAsync(string siteID, object userState) {
            if ((this.getSiteOperationCompleted == null)) {
                this.getSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSiteOperationCompleted);
            }
            this.InvokeAsync("getSite", new object[] {
                        siteID}, this.getSiteOperationCompleted, userState);
        }
        
        private void OngetSiteOperationCompleted(object arg) {
            if ((this.getSiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSiteCompleted(this, new getSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://vistaweb.med.va.gov/webservices/ImagingExchangeSiteService/getImagingExcha" +
            "ngeSites", RequestNamespace="http://vistaweb.med.va.gov/webservices/ImagingExchangeSiteService", ResponseNamespace="http://vistaweb.med.va.gov/webservices/ImagingExchangeSiteService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ImagingExchangeSiteTO[] getImagingExchangeSites() {
            object[] results = this.Invoke("getImagingExchangeSites", new object[0]);
            return ((ImagingExchangeSiteTO[])(results[0]));
        }
        
        /// <remarks/>
        public void getImagingExchangeSitesAsync() {
            this.getImagingExchangeSitesAsync(null);
        }
        
        /// <remarks/>
        public void getImagingExchangeSitesAsync(object userState) {
            if ((this.getImagingExchangeSitesOperationCompleted == null)) {
                this.getImagingExchangeSitesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetImagingExchangeSitesOperationCompleted);
            }
            this.InvokeAsync("getImagingExchangeSites", new object[0], this.getImagingExchangeSitesOperationCompleted, userState);
        }
        
        private void OngetImagingExchangeSitesOperationCompleted(object arg) {
            if ((this.getImagingExchangeSitesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getImagingExchangeSitesCompleted(this, new getImagingExchangeSitesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://vistaweb.med.va.gov/webservices/ImagingExchangeSiteService")]
    public partial class ImagingExchangeRegionTO {
        
        private string nameField;
        
        private string idField;
        
        private ImagingExchangeSiteTO[] sitesField;
        
        private FaultTO faultTOField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public ImagingExchangeSiteTO[] sites {
            get {
                return this.sitesField;
            }
            set {
                this.sitesField = value;
            }
        }
        
        /// <remarks/>
        public FaultTO faultTO {
            get {
                return this.faultTOField;
            }
            set {
                this.faultTOField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://vistaweb.med.va.gov/webservices/ImagingExchangeSiteService")]
    public partial class ImagingExchangeSiteTO {
        
        private string siteNumberField;
        
        private string siteNameField;
        
        private string regionIDField;
        
        private string siteAbbrField;
        
        private string vistaServerField;
        
        private int vistaPortField;
        
        private string acceleratorServerField;
        
        private int acceleratorPortField;
        
        private FaultTO faultTOField;
        
        /// <remarks/>
        public string siteNumber {
            get {
                return this.siteNumberField;
            }
            set {
                this.siteNumberField = value;
            }
        }
        
        /// <remarks/>
        public string siteName {
            get {
                return this.siteNameField;
            }
            set {
                this.siteNameField = value;
            }
        }
        
        /// <remarks/>
        public string regionID {
            get {
                return this.regionIDField;
            }
            set {
                this.regionIDField = value;
            }
        }
        
        /// <remarks/>
        public string siteAbbr {
            get {
                return this.siteAbbrField;
            }
            set {
                this.siteAbbrField = value;
            }
        }
        
        /// <remarks/>
        public string vistaServer {
            get {
                return this.vistaServerField;
            }
            set {
                this.vistaServerField = value;
            }
        }
        
        /// <remarks/>
        public int vistaPort {
            get {
                return this.vistaPortField;
            }
            set {
                this.vistaPortField = value;
            }
        }
        
        /// <remarks/>
        public string acceleratorServer {
            get {
                return this.acceleratorServerField;
            }
            set {
                this.acceleratorServerField = value;
            }
        }
        
        /// <remarks/>
        public int acceleratorPort {
            get {
                return this.acceleratorPortField;
            }
            set {
                this.acceleratorPortField = value;
            }
        }
        
        /// <remarks/>
        public FaultTO faultTO {
            get {
                return this.faultTOField;
            }
            set {
                this.faultTOField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://vistaweb.med.va.gov/webservices/ImagingExchangeSiteService")]
    public partial class FaultTO {
        
        private string typeField;
        
        private string messageField;
        
        private string[] stackTraceField;
        
        private string suggestionField;
        
        /// <remarks/>
        public string type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string[] stackTrace {
            get {
                return this.stackTraceField;
            }
            set {
                this.stackTraceField = value;
            }
        }
        
        /// <remarks/>
        public string suggestion {
            get {
                return this.suggestionField;
            }
            set {
                this.suggestionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getVISNCompletedEventHandler(object sender, getVISNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVISNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVISNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ImagingExchangeRegionTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ImagingExchangeRegionTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getSitesCompletedEventHandler(object sender, getSitesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSitesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSitesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ImagingExchangeSiteTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ImagingExchangeSiteTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getSiteCompletedEventHandler(object sender, getSiteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ImagingExchangeSiteTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ImagingExchangeSiteTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getImagingExchangeSitesCompletedEventHandler(object sender, getImagingExchangeSitesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getImagingExchangeSitesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getImagingExchangeSitesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ImagingExchangeSiteTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ImagingExchangeSiteTO[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591