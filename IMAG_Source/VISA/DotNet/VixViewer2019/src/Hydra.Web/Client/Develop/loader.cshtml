@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<ViewerModel>
    @using Hydra.Web
    <!DOCTYPE html>
    <html>

    <head>
        <meta content="text/html;charset=utf-8" http-equiv="Content-Type">
        <meta content="utf-8" http-equiv="encoding">
        <meta http-equiv="X-UA-Compatible" content="IE=Edge">

        <title>VIX Viewer</title>
        <link type="text/css" href="../js/jquery-ui-1.8.23.custom/css/custom-theme/jquery-ui-1.8.23.custom.css" rel="stylesheet" />
        <!-- TODO: script src="@Model.BaseUrl/js/jquery-1.12.4.min.js" --><!-- /script -->
        <script src="@Model.BaseUrl/js/jquery-1.11.1.js"></script>

        <script>
            ///vvvvvvvvvvv TODO VAI-919: Change var to const vvvvvvvvvv
            var rootURL = "@Model.BaseUrl"; //VAI-915
            var baseURL = "@Model.BaseApiUrl";
            var baseViewerURL = "@Model.BaseViewerUrl"; //this page
            var baseSignalrURL = "@Model.BaseSignalrUrl";
            //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

            var releaseBuild = false;

            if (!releaseBuild) {
                importScripts("../js/basic.js");
                importScripts("../js/spin.js");
                importScripts("../js/imageProgressManager.js");
                importScripts("../js/urlConfig.js");
            } else {
                //These lines are updated during the build with version numbers, but the lines above are not
                importScripts("../js/basic.min.js");
                importScripts("../js/spin.min.js");
                importScripts("../js/imageProgressManager.min.js");
                importScripts("../js/urlConfig.min.js");
            }

            function importScripts(src) {
                var script = document.createElement("script");
                script.setAttribute("type", "text/javascript");
                script.setAttribute("src", src);
                document.getElementsByTagName("head")[0].appendChild(script);
            }
        </script>

        <style>
            .button {
                background-color: #C0C0C0;
                border: none;
                color: black;
                padding: 10px 10px;
                text-align: center;
                text-decoration: none;
                display: inline-block;
                font-size: 11px;
                margin: 10px 5px;
                cursor: pointer;
                width: 160px;
                height: 42px;
            }

                .button:hover {
                    background-color: #e7e7e7;
                }
        </style>
    </head>

    <body style="background-color:gray;">
        <div id="spinnerContainer" class="spinner" style="width:100%;height:100%;background-color: Gray;"></div>
        <div id="content"> </div>
        <div id="reloadDiv" align="center" style="position:fixed;z-index:100;top:40%;left:45%;margin:-100px 0 0 -100px;width:400px;height:80px;color:white">
        </div>
        <div style="width:100%;top:40%;text-align:center;position:fixed">
            <table style="width:100%">
                <tbody>
                    <tr style="width:100%">
                        <td style="border-bottom:7px solid transparent">
                            <div id="sensitiveDiv" align="center" style="Width:100%;position:fixed;z-index:100;color:white">
                            </div>
                        </td>
                    </tr>
                    <tr style="width:100%">
                        <td>
                            <div class="col-xs-6" id="yesButton" style="text-align:right"></div>
                        </td>
                        <td>
                            <div class="col-xs-6" id="noButton" style="text-align:left"></div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <script>
            var opts = {
                lines: 15, // The number of lines to draw
                length: 20, // The length of each line
                width: 10, // The line thickness
                radius: 50, // The radius of the inner circle
                corners: 1.5, // Corner roundness (0..1)
                rotate: 0, // The rotation offset
                direction: 1, // 1: clockwise, -1: counterclockwise
                color: '#000', // #rgb or #rrggbb or array of colors
                speed: 1, // Rounds per second
                trail: 60, // Afterglow percentage
                shadow: false, // Whether to render a shadow
                hwaccel: false, // Whether to use hardware acceleration
                className: 'spinner', // The CSS class to assign to the spinner
                zIndex: 2e9, // The z-index (defaults to 2000000000)
                top: '50%', // Top position relative to parent
                left: '50%' // Left position relative to parent
            };

        </script>

        <script>
            var numberOfCacheRetryAttempts = 0;
            var spinner = null;
            var totalImagesCount; // = data.status.totalImageCount;
            var imagesProcessed; // = data.status.imagesProcessed;
            var failedObject; // = data.status.imagesFailed;
            var imagesUploaded; // = data.status.imagesUploaded;
            var imagesUploadFailed;
            var statusCode;
            var innerText = "";
            var MyTimeDelay = 2000;
            var reloadCounter = 0;
            var prepareStudyFlag = true;
            var sensitiveWarningFlag = true;

            var STATUSCODE_ERROR = -1;
            var STATUSCODE_CACHED = 0;
            var STATUSCODE_CACHING = 1;
            var STATUSCODE_PROCESSING = 2;
            var previousResponseTimeStamp = undefined;

            $(window).on('load', function () {

                // check if sensitive flag is set.
                var isSensitive = BasicUtil.getUrlParameter("IsSensitive");
                if (isSensitive.toLowerCase() === "true") {
                    sensitiveAction();
                } else
                    setTimeout(function() {
                        loadStudy();
                    }, 500);
            });

            function sensitiveAction() {
                var divID = document.getElementById("sensitiveDiv");
                if (divID != null) {

                    var txtSensitive = document.createTextNode("This study contains controlled images. Do you want to continue?");

                    var yesBtn = document.createElement("BUTTON");
                    yesBtn.appendChild(document.createTextNode("Yes"));
                    yesBtn.setAttribute("class", "button");
                    yesBtn.setAttribute("id", "yesBtn");
                    yesBtn.onclick = function() {
                        divID.style.display = 'none';
                        noBtn.style.display = 'none';
                        yesBtn.style.display = 'none';
                        setTimeout(function() {
                            loadStudy();
                        }, 500);
                    };

                    var noBtn = document.createElement("BUTTON");
                    noBtn.appendChild(document.createTextNode("No"));
                    noBtn.setAttribute("class", "button");
                    noBtn.onclick = function() {
                        txtSensitive.nodeValue = "Please close this tab.";
                        noBtn.style.display = 'none';
                        yesBtn.style.display = 'none';
                    };

                    divID.appendChild(txtSensitive);
                    var YesBtn = document.getElementById("yesButton");
                    var NOBtn = document.getElementById("noButton");
                    YesBtn.appendChild(yesBtn);
                    NOBtn.appendChild(noBtn);
                }
            }

            function loadStudy() {
                innerText = "Checking study\nfor updates...";
                showPage();

                prepareStudy();

                innerText = "Caching images.\nPlease wait...";
                showPage();

                cacheAllImagesFunction();
            }

            function prepareStudy() {

                if (prepareStudyFlag) {

                    prepareStudyFlag = false;

                    var d = new Date();
                    var n = d.getMilliseconds();
                    var url = rootURL + "/viewer/prepare?" + BasicUtil.getCurrentUrlParamsAfterQM() + "&_cacheBust=" + n;
                    var xhttp;
                    if (window.XMLHttpRequest) {
                        xhttp = new XMLHttpRequest();
                    } else {
                        // code for IE6, IE5
                        xhttp = new ActiveXObject("Microsoft.XMLHTTP");
                    }
                    xhttp.onreadystatechange = function() {
                        if (xhttp.readyState == 4 && xhttp.status == 200) {}
                    };
                    xhttp.open("POST", url, true);
                    xhttp.send();
                }
            }

            function cacheAllImagesFunction() {
                var d = new Date();
                var n = d.getMilliseconds();
                var timeStamp = d.getTime();
                var url = rootURL + "/viewer/context?" + BasicUtil.getCurrentUrlParamsAfterQM() + "&StatusOnly=true" + "&_cacheBust=" + n + "&_timeStamp=" + timeStamp;
                var xhttp;
                if (window.XMLHttpRequest) {
                    xhttp = new XMLHttpRequest();
                } else {
                    // code for IE6, IE5
                    xhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xhttp.url = url;
                xhttp.onreadystatechange = function() {

                    if (xhttp.readyState == 4 && xhttp.status == 500) {
                        errorAction();
                        return;
                    }

                    if (xhttp.readyState == 4 && xhttp.status == 200) {

                        var data = JSON.parse(xhttp.responseText);
                        if (data.status !== undefined) {

                            totalImagesCount = data.status.totalImageCount;
                            imagesProcessed = data.status.imagesProcessed;
                            failedObject = data.status.imagesFailed;
                            imagesUploaded = data.status.imagesUploaded;
                            imagesUploadFailed = data.status.imagesUploadFailed;
                            statusCode = data.status.statusCode;

                            // Check whether the image count is valid or not
                            if (totalImagesCount <= 0) {
                                abortAction();
                                return;
                            }

                            var responseTimeStamp = undefined;
                            if (xhttp.url !== undefined && xhttp.url !== null) {
                                responseTimeStamp = parseInt(xhttp.url.split('&_timeStamp=').pop());
                            }

                            if (previousResponseTimeStamp == undefined || previousResponseTimeStamp < responseTimeStamp) {
                                innerText = "Total Images: " + totalImagesCount + "\n" +
                                    "Images Uploaded: " + imagesUploaded + "\n" +
                                    "Images Failed: " + (failedObject + imagesUploadFailed) + "\n" +
                                    "Images Processed: " + imagesProcessed;
                                previousResponseTimeStamp = responseTimeStamp;
                            }
                            showPage();

                            if ((statusCode == STATUSCODE_CACHING) || (statusCode == STATUSCODE_PROCESSING)) {
                                setTimeout(cacheAllImagesFunction, MyTimeDelay);
                                return;
                            }

                            if ((statusCode == STATUSCODE_ERROR) ||
                                (statusCode == STATUSCODE_CACHED) && ((failedObject > 0) || (imagesUploadFailed > 0))) {
                                reloadAction(failedObject + imagesUploadFailed);
                                return;
                            }
                        }

                        load_home();
                    }
                };
                xhttp.open("GET", url, true);
                xhttp.send();
            }

            function removeStudyByContextID() {
                var d = new Date();
                var n = d.getMilliseconds();
                var url = rootURL + "/viewer/context?" + BasicUtil.getCurrentUrlParamsAfterQM() + "&_cacheBust=" + n;
                var xhttp;
                if (window.XMLHttpRequest) {
                    xhttp = new XMLHttpRequest();
                } else {
                    // code for IE6, IE5
                    xhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                xhttp.onreadystatechange = function() {
                    if (xhttp.readyState == 4 && xhttp.status == 200) {
                        $("#reloadDiv").html("");
                        $("#reloadDiv").hide();
                        showPage();
                        cacheAllImagesFunction();
                    }
                };
                xhttp.open("DELETE", url, true);
                xhttp.send();
            }

            function reloadAction(failedObject) {
                $("#reloadDiv").show();
                if (spinner != null) spinner.stop();
                var BtnId = document.getElementById("ReloadBtn");
                if (BtnId == null) {
                    var ReloadBtn = document.createElement("BUTTON");
                    var Reloadtxt = document.createTextNode("Delete Cache and Try Again");
                    ReloadBtn.appendChild(Reloadtxt);
                    ReloadBtn.setAttribute("class", "button");
                    ReloadBtn.setAttribute("id", "ReloadBtn");
                    ReloadBtn.onclick = removeStudyByContextID;

                    var ContinueBtn = document.createElement("BUTTON");
                    var Canceltxt = document.createTextNode("Proceed Anyway");
                    ContinueBtn.appendChild(Canceltxt);
                    ContinueBtn.setAttribute("class", "button");
                    ContinueBtn.onclick = cancelReload;

                    var message = "Failed to process " + failedObject + " image(s) out of " + totalImagesCount + ".";
                    var txtFailed = document.createTextNode(message);
                    var divID = document.getElementById("reloadDiv");
                    document.body.appendChild(divID);
                    divID.appendChild(txtFailed);
                    divID.appendChild(ReloadBtn);

                    if (imagesProcessed > 0) {
                        divID.appendChild(ContinueBtn);
                    }
                }
            }

            /**
             * Abort the loader action
             */
            function abortAction() {
                if (spinner != null) {
                    spinner.stop();
                }

                $("#reloadDiv").css({
                    'position': 'absolute',
                    'top': 0,
                    'left': 0,
                    'right': 0,
                    'bottom': 0,
                    'margin': 'auto'
                });
                $("#reloadDiv").html("No images found - If you think there are images associated with this study, please contact technical support.");
            }

            function errorAction() {
                if (spinner != null) {
                    spinner.stop();
                }

                $("#reloadDiv").css({
                    'position': 'absolute',
                    'top': 0,
                    'left': 0,
                    'right': 0,
                    'bottom': 0,
                    'margin': 'auto'
                });
                $("#reloadDiv").html("Error opening images - If you think there are images associated with this study, please contact technical support.");
            }

            function cancelReload() {
                load_home();
            }

            function showPage() {
                if (spinner != null) spinner.stop();
                var target = document.getElementById('spinnerContainer');
                spinner = new Spinner(opts).spin(target, innerText);
            }

            function load_home() {
                window.location = rootURL + "/viewer?" + BasicUtil.getCurrentUrlParamsAfterQM();
            }

        </script>
    </body>
    </html>
