<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- 
	This is the context configuration (the web application configuration) when running on a Tomcat server.  
	NOTE: For illustrative purpose, this file includes explicit definition of most values though many are set to their defaults.
	Where setting the values could interfere with proper settings of a default value (and the default value is desired) the
	elements are included in comments.
-->
<Context
	backgroundProcessorDelay="-1"
	className="org.apache.catalina.core.StandardContext"
	cookies="true"
	crossContext="false"
	docBase="VixServerHealthWebApp"
	override="true"
	privileged="false"
	reloadable="true"
	allowLinking="false"
	antiJARLocking="false"
	antiResourceLocking="false"
	cacheMaxSize="1024"
	cacheTTL="5000"
	cachingAllowed="false"
	caseSensitive="true"
	processTlds="true"
	swallowOutput="false"
	tldNamespaceAware="false"
	tldValidation="false"
	unloadDelay="2000"
	unpackWAR="true"
	useNaming="true"
>
	<!--
	REALM CONFIGURATION IS NOW DONE IN conf/server.xml for the entire context.
	<Realm 
		className="gov.va.med.imaging.tomcat.vistarealm.VistaRealm" 
	/>
	 -->
	 <!-- 
	 VistaRealm uses VistaImaging for access/verify login 
	 NOTE: Tomcat is really picky about capitalization in this file.
	 The Ream element as follows is correct, do not change any of the
	 letter cases.  The result is that the application will not start.
	 The error displayed says something like "parse error in default web.xml"
	 
	 Use:
	 		className="gov.va.med.imaging.tomcat.vistarealm.MockVistaRealm" 
	 for testing where Vista is not available for authentication, users and roles will be obtained from 
	 MockVistaRealmUsers.xml in the ImagingVistaRealm jar file.
	<Realm 
		className="gov.va.med.imaging.tomcat.vistarealm.VistaRealm" 
	/>
	 -->
	<!--
		The VistaRealm may be configured using the following attributes of the Realm element:
		localSiteNumber = "660"
		localSiteAbbreviation = "SLC"
		localSiteName = "Salt Lake City, UT"
		localVistaServer = "localhost"
		localVistaPort = "9300"
		propertiesFilePath = "/VIX/VistaRealm.properties"

		If the propertiesFilePath attribute is set then VistaREalm will load its properties from
		there, overwriting any attributes specified in the Realm element of this file.
		If the propertiesFilePath attribute is specified then the configuration of the realm will
		be read to and written there (when the VistaRealmMBean load() and store() method are called).
		If the propertiesFilePath attribute is NOT specified then the configuration of the realm will
		be read to and written from the directory specified by the vixconfig environment variable
		or to "/VIX" if that is not specified.  The name of the file, in either case, is VistaRealm.properties
		Once the VistaRealm.properties file exists it will be used preferentially over the attributes in the 
		Realm element.
	-->	
	<!-- Realm className="org.apache.catalina.realm.MemoryRealm" pathname="conf/tomcat-users.xml"/ -->

	<!-- 
	The ResourceLink element connects the web application (web.xml reseource-ref elements)
	to the server resources (server.xml Resource elements).
	ResourceLink.name -> web.xml resource-ref.res-ref-name attribute
	ResourceLink.global->server.xml Resource.name
	type->the type returned by the factory declared in server.xml Resource.factory.getObjectInstance()
	      and also the same classname as the web.xml resource-ref.resource-type 
	-->
	<!-- 
	<ResourceLink name="AppConfiguration" global="AppConfiguration" type="gov.va.med.imaging.core.interfaces.IAppConfiguration"/>
	<ResourceLink name="CoreRouter" global="CoreRouter" type="gov.va.med.server.interfaces.CoreRouter"/>	 
	<ResourceLink name="CommandFactory" global="CommandFactory" type="gov.va.med.imaging.core.interfaces.router.CommandFactory"/>	 
	 -->
	
	<!-- 
	==================================================
	Generic Context attributes
	==================================================
	-->
	
	<!-- 
		backgroundProcessorDelay
		This value represents the delay in seconds between the invocation of the backgroundProcess method on this context and its child containers, 
		including all wrappers. Child containers will not be invoked if their delay value is not negative (which would mean they are using their own 
		processing thread). Setting this to a positive value will cause a thread to be spawn. After waiting the specified amount of time, the thread 
		will invoke the backgroundProcess method on this host and all its child containers. A context will use background processing to perform session 
		expiration and class monitoring for reloading. If not specified, the default value for this attribute is -1, which means the context will rely 
		on the background processing thread of its parent host. 
	-->

	<!-- 
		className
		Java class name of the implementation to use. This class must implement the org.apache.catalina.Context interface. If not specified, 
		the standard value (defined below) will be used. 
	-->

	<!-- 	
		cookies
		Set to true if you want cookies to be used for session identifier communication if supported by the client (this is the default). 
		Set to false if you want to disable the use of cookies for session identifier communication, and rely only on URL rewriting by the application.
	-->

	<!-- 
		crossContext
		Set to true if you want calls within this application to ServletContext.getContext() to successfully return a request dispatcher for other 
		web applications running on this virtual host. Set to false (the default) in security conscious environments, to make getContext() always return null.
	-->

	<!-- 
		docBase
		The Document Base (also known as the Context Root) directory for this web application, or the pathname to the web application archive file 
		(if this web application is being executed directly from the WAR file). You may specify an absolute pathname for this directory or WAR file, 
		or a pathname that is relative to the appBase directory of the owning Host.
	-->

	<!-- 
		override
		Set to true to have explicit settings in this Context element override any corresponding settings in the DefaultContext element associated 
		with our owning Host. By default, settings in the DefaultContext element will be used.
	-->

	<!-- 
		privileged
		Set to true to allow this context to use container servlets, like the manager servlet.
	-->

	<!-- 
		path
		The context path of this web application, which is matched against the beginning of each request URI to select the appropriate web application 
		for processing. All of the context paths within a particular Host must be unique. If you specify a context path of an empty string (""), 
		you are defining the default web application for this Host, which will process all requests not assigned to other Contexts. 
		The value of this field must not be set except when statically defining a Context in server.xml, as it will be infered from the filenames 
		used for either the .xml context file or the docBase.
	-->

	<!-- 
		reloadable
		Set to true if you want Catalina to monitor classes in /WEB-INF/classes/ and /WEB-INF/lib for changes, and automatically reload the 
		web application if a change is detected. This feature is very useful during application development, but it requires significant runtime 
		overhead and is not recommended for use on deployed production applications. That's why the default setting for this attribute is false. 
		You can use the Manager web application, however, to trigger reloads of deployed applications on demand.
	-->

	<!-- 
		wrapperClass
		Java class name of the org.apache.catalina.Wrapper implementation class that will be used for servlets managed by this Context. 
		If not specified, a standard default value will be used.
	-->

	<!-- 
	==================================================
	org.apache.catalina.core.StandardContext elements 
	==================================================
	-->
	
	<!-- 
		allowLinking
		If the value of this flag is true, symlinks will be allowed inside the web application, pointing to resources outside the web application base path. 
		If not specified, the default value of the flag is false.
		NOTE: This flag MUST NOT be set to true on the Windows platform (or any other OS which does not have a case sensitive filesystem), as it will disable 
		case sensitivity checks, allowing JSP source code disclosure, among other security problems.
	 -->

	<!-- 
		antiJARLocking
		If true, the Tomcat classloader will take extra measures to avoid JAR file locking when resources are accessed inside JARs through URLs. 
		This will impact startup time of applications, but could prove to be useful on platforms or configurations where file locking can occur. 
		If not specified, the default value is false.
	 -->

	<!-- 
		antiResourceLocking
		If true, Tomcat will prevent any file locking. This will significantly impact startup time of applications, but allows full webapp hot deploy and 
		undeploy on platforms or configurations where file locking can occur. 
		If not specified, the default value is false.
		Please note that setting this to true has some side effects, including the disabling of JSP reloading in a running server: see Bugzilla 37668.
	 -->

	<!-- 
		cacheMaxSize
		Maximum size of the static resource cache in kilobytes. If not specified, the default value is 10240 (10 megabytes).
	 -->

	<!-- 
		cacheTTL
		Amount of time in milliseconds between cache entries revalidation. 
		If not specified, the default value is 5000 (5 seconds).
	 -->

	<!-- 
		cachingAllowed
		If the value of this flag is true, the cache for static resources will be used. 
		If not specified, the default value of the flag is true.
		
		NOTE: This application has no static content, so caching is turned off.
	 -->

	<!-- 
		caseSensitive
		If the value of this flag is true, all case sensitivity checks will be disabled. 
		If not specified, the default value of the flag is true.

		NOTE: This flag MUST NOT be set to false on the Windows platform (or any other OS which does not have a case sensitive filesystem), 
		as it will disable case sensitivity checks, allowing JSP source code disclosure, among other security problems.
		
		NOTE: if caseSensitive is TRUE then case sensitivity is turned OFF.
	 -->

	<!-- 
		processTlds
		Whether the context should process TLDs on startup. 
		The default is true. 
		The false setting is intended for special cases that know in advance TLDs are not part of the webapp.
	 -->

	<!-- 
		swallowOutput
		If the value of this flag is true, the bytes output to System.out and System.err by the web application will be redirected to the web application logger. 
		If not specified, the default value of the flag is false.
	 -->

	<!-- 
		tldNamespaceAware
		If the value of this flag is true, the TLD files XML validation will be namespace-aware. 
		If you turn this flag on, you should probably also turn tldValidation on. 
		The default value for this flag is false, and setting it to true will incur a performance penalty.
	 -->

	<!-- 
		tldValidation
		If the value of this flag is true, the TLD files will be XML validated on context startup. 
		The default value for this flag is false, and setting it to true will incur a performance penalty.
	 -->

	<!-- 
		unloadDelay
		Amount of ms that the container will wait for servlets to unload. 
		If not specified, the default value of the flag is 2000 ms.
	 -->

	<!-- 
		unpackWAR
		If true, Tomcat will unpack all compressed web applications before running them. 
		If not specified, the default value is true.
	 -->

	<!-- 
		useNaming
		Set to true (the default) to have Catalina enable a JNDI InitialContext for this web application that is compatible with 
		Java2 Enterprise Edition (J2EE) platform conventions.
	 -->

	<!-- 
		workDir
		Pathname to a scratch directory to be provided by this Context for temporary read-write use by servlets within the associated web application. 
		This directory will be made visible to servlets in the web application by a servlet context attribute (of type java.io.File) 
		named javax.servlet.context.tempdir as described in the Servlet Specification. 
		If not specified, a suitable directory underneath $CATALINA_HOME/work will be provided.	
	 -->

	<!-- 
	    You can nest at most one instance of the following utility components by nesting a corresponding element inside your Context element:
        * Loader - Configure the web application class loader that will be used to load servlet and bean classes for this web application. 
        Normally, the default configuration of the class loader will be sufficient.
        * Manager - Configure the session manager that will be used to create, destroy, and persist HTTP sessions for this web application. 
        Normally, the default configuration of the session manager will be sufficient.
        * Realm - Configure a realm that will allow its database of users, and their associated roles, to be utilized solely for this particular web application. 
        If not specified, this web application will utilize the Realm associated with the owning Host or Engine.
        * Resources - Configure the resource manager that will be used to access the static resources associated with this web application. 
        Normally, the default configuration of the resource manager will be sufficient.
        * WatchedResource - The auto deployer will monitor the specified static resource of the web application for updates, 
        and will reload the web application if is is updated. The content of this element must be a string.
	 -->
	 
	 <!-- The default realm is MemoryRealm, included here for testing -->
	 <!--  <realm classname="org.apache.catalina.realm.MemoryRealm" pathname="conf/tomcat-users.xml"/> -->
	   <JarScanner scanManifest="false"/>

</Context>
