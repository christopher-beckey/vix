<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
		 version="2.5" id="WebApp_1532538364208">
	<display-name>
		Vix GUI
	</display-name>

	<welcome-file-list>
		<welcome-file>index_secure.jsp</welcome-file>
	</welcome-file-list>

	<!-- 
	The listener inspects the 'contextConfigLocation' parameter. 
	If the parameter does not exist, the listener will use /WEB-INF/applicationContext.xml as a default. 
	When it does exist, it will separate the String using predefined delimiters (comma, semi-colon and whitespace) 
	and use the values as locations where application contexts will be searched for. 
	Ant-style path patterns are supported as well: 
	e.g. /WEB-INF/*Context.xml  (for all files whose name ends with "Context.xml", residing in the "WEB-INF" directory) 
	or 
	/WEB-INF/**/*Context.xml (for all such files in any subdirectory of "WEB-INF").	
	-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/applicationContext.xml</param-value>
	</context-param>

	<listener>
		<description>
			The Spring servlet context listener that loads the
			application context.
		</description>
		<display-name>Spring context loader listener</display-name>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>
	
	<jsp-config>
		<jsp-property-group>
			<display-name>Secure UI Components</display-name>
			<url-pattern>*.jsp</url-pattern>
			<include-prelude>/secure/template/prelude.jspf</include-prelude>
			<include-coda>/secure/template/coda.jspf</include-coda>
		</jsp-property-group>
	</jsp-config>

	<!-- resource-ref section -->
	
	<resource-ref>
		<description>The VIX Core</description>
		<res-ref-name>CoreRouter</res-ref-name>
		<res-type>gov.va.med.imaging.core.interfaces.Router</res-type>
		<res-auth>Container</res-auth>
	</resource-ref>

	<resource-ref>
		<description>The VIX Core Command Factory</description>
		<res-ref-name>CommandFactory</res-ref-name>
		<res-type>gov.va.med.imaging.core.interfaces.router.CommandFactory</res-type>
		<res-auth>Container</res-auth>
	</resource-ref>

	<resource-ref>
		<description>The VIX Core Application Configuration</description>
		<res-ref-name>AppConfiguration</res-ref-name>
		<res-type>gov.va.med.imaging.core.interfaces.IAppConfiguration</res-type>
		<res-auth>Container</res-auth>
	</resource-ref>
	
	<!-- resource-ref section -->
	
	<!-- filter section -->
	
	<filter>
		<filter-name>TransactionContextClearFilter</filter-name>
		<filter-class>gov.va.med.imaging.TransactionContextClearFilter</filter-class>
	</filter>

	<filter>
		<filter-name>SecurityTokenFilter</filter-name>
		<filter-class>gov.va.med.imaging.transactioncontext.SecurityTokenFilter</filter-class>
		<init-param>
			<param-name>loginPage</param-name>
			<param-value>https://localhost:343/vix/viewer/tools</param-value>
		</init-param>
		<init-param>
			<param-name>authenticationCredentials</param-name>
			<param-value>alexdelarge;655321,vixlog;tachik0ma</param-value>
		</init-param>
	</filter>

		<!--
		org.springframework.web.filter.DelegatingFilterProxy is a J2EE servlet filter that wraps
		another J2EE servlet filter and provides Spring context (i.e. dependency injection).
		We wrap the SecurityFilter so that it has access to the transaction logger.
		-->
	<filter>
		<description>Sets the security context on the request and clears it on the response.</description>
		<display-name>Security Context Creation and Destruction</display-name>
		<filter-name>SecurityFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<!-- <filter-class>gov.va.med.imaging.SecurityFilter</filter-class>  -->
		<init-param>
			<param-name>targetBeanName</param-name>
			<param-value>securityFilter</param-value>
		</init-param>
	</filter>
	
	<!-- servlet section -->
	
	<servlet>
		<description>A servlet that builds a transaction log in Excel or CSV format.</description>
		<display-name>Spreadsheet Transaction Log Servlet</display-name>
		<servlet-name>ExcelTransactionLog</servlet-name>
		<servlet-class>gov.va.med.imaging.exchange.ExcelTransactionLog</servlet-class>
	</servlet>

	<servlet>
		<servlet-name>JavaLogDownloader</servlet-name>
		<servlet-class>gov.va.med.imaging.exchange.JavaLogDownloader</servlet-class>
	</servlet>

	<servlet>
		<description>A servlet that builds the menu JavaScript.</description>
		<display-name>Menu JavaScript Servlet</display-name>
		<servlet-name>MenuJavaScript</servlet-name>
		<servlet-class>gov.va.med.imaging.exchange.GenerateMenuJavaScript</servlet-class>
	</servlet>

	<servlet>
		<description>A servlet that supports refreshing the site service</description>
		<display-name>Thumbnail Servlet</display-name>
		<servlet-name>RefreshSiteServiceServlet</servlet-name>
		<servlet-class>gov.va.med.imaging.exchange.RefreshSiteServiceServlet</servlet-class>
	</servlet>

	<servlet>
		<description>A servlet that supports refreshing the VIX configurations</description>
		<display-name>Config Servlet</display-name>
		<servlet-name>RefreshVixConfigServlet</servlet-name>
		<servlet-class>gov.va.med.imaging.exchange.RefreshVixConfigServlet</servlet-class>
	</servlet>
	
	<!-- Jersey servlet -->
	<servlet>
		<display-name>JAX-RS REST Servlet</display-name>
		<servlet-name>JAX-RS REST Servlet</servlet-name>
		<servlet-class>com.sun.jersey.spi.container.servlet.ServletContainer</servlet-class>
		<init-param>
			<param-name>com.sun.jersey.config.property.packages</param-name>
			<param-value>gov.va.med.imaging.web.rest.exceptions;gov.va.med.imaging.transactions;gov.va.med.imaging.exchange</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	
	<!-- servlet section -->
	
	<!-- servlet mapping section -->
	
	<servlet-mapping>
		<servlet-name>ExcelTransactionLog</servlet-name>
		<url-pattern>/secure/ExcelTransactionLog</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>JavaLogDownloader</servlet-name>
		<url-pattern>/ssl/JavaLogDownloader</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>MenuJavaScript</servlet-name>
		<url-pattern>/script/MenuJavaScript.js</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>RefreshSiteServiceServlet</servlet-name>
		<url-pattern>/secure/RefreshSiteServiceServlet</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>RefreshVixConfigServlet</servlet-name>
		<url-pattern>/secure/RefreshVixConfigServlet</url-pattern>
	</servlet-mapping>
	
	<servlet-mapping>
		<servlet-name>JAX-RS REST Servlet</servlet-name>
		<url-pattern>/restservices/*</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>JAX-RS REST Servlet</servlet-name>
		<url-pattern>/token/restservices/*</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>JAX-RS REST Servlet</servlet-name>
		<url-pattern>/sts/restservices/*</url-pattern>
	</servlet-mapping>
	
	<!-- servlet mapping section -->
	
	<!-- filter mapping section -->
	
	<filter-mapping>
		<filter-name>TransactionContextClearFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>SecurityFilter</filter-name>
		<url-pattern>/secure/SystemProperties.jspx</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>SecurityTokenFilter</filter-name>
		<url-pattern>/secure/*</url-pattern>
		<url-pattern>/ssl/*</url-pattern>
	</filter-mapping>
	
	<!-- filter mapping section -->
	
	<!-- Keep. May be of use later.
	<login-config>
		<auth-method>FORM</auth-method>
		<form-login-config>
			<form-login-page>/Login.html</form-login-page>
			<form-error-page>/LoginError.html</form-error-page>
		</form-login-config>
	</login-config>
	-->

	<!-- Quoc added this per Adam's request -->
	<login-config>
    	<auth-method>BASIC</auth-method>
  	</login-config>
  
	<security-role>
		<role-name>vista-user</role-name>
	</security-role>
	<security-role>
		<role-name>administrator</role-name>
	</security-role>
	<security-role>
		<role-name>developer</role-name>
	</security-role>

</web-app>