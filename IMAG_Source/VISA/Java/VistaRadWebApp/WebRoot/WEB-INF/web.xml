<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee   http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
 <!--
	org.springframework.web.filter.DelegatingFilterProxy is a J2EE servlet filter that wraps
	another J2EE servlet filter and provides Spring context (i.e. dependency injection). 
	We wrap the SecurityFilter so that it has access to the transaction logger.
	-->
 <filter>
  <description>Sets the security context on the request and clears it on the response.</description>
  <display-name>Security Context Creation and Destruction</display-name>
  <filter-name>SecurityFilter</filter-name>
  <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
  <!-- <filter-class>gov.va.med.imaging.SecurityFilter</filter-class>  -->
  <init-param>
   <param-name>targetBeanName</param-name>
   <param-value>securityFilter</param-value>
  </init-param>
 </filter>
 <filter-mapping>
  <filter-name>SecurityFilter</filter-name>
  <servlet-name>AxisServlet</servlet-name>
 </filter-mapping>
 <filter-mapping>
  <filter-name>SecurityFilter</filter-name>
  <servlet-name>wado</servlet-name>
 </filter-mapping>
 <filter-mapping>
  <filter-name>SecurityFilter</filter-name>
  <servlet-name>ImageServlet</servlet-name>
 </filter-mapping>
 <filter-mapping>
  <filter-name>SecurityFilter</filter-name>
  <servlet-name>CachedImageServlet</servlet-name>
 </filter-mapping>
  <filter-mapping>
  <filter-name>SecurityFilter</filter-name>
  <servlet-name>TextServlet</servlet-name>
 </filter-mapping>
 <filter-mapping>
  <filter-name>SecurityFilter</filter-name>
  <servlet-name>ExamImageTextServlet</servlet-name>
 </filter-mapping>
 <filter-mapping>
  <filter-name>SecurityFilter</filter-name>
  <servlet-name>CachedExamImageTextServlet</servlet-name>
 </filter-mapping>
 <listener>
  <description>The Spring servlet context listener that loads the
			application context.</description>
  <display-name>Spring context loader listener</display-name>
  <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
 </listener>
 <listener>
  <listener-class>org.apache.axis.transport.http.AxisHTTPSessionListener</listener-class>
 </listener>
 <servlet>
  <display-name>Apache-Axis Servlet</display-name>
  <servlet-name>AxisServlet</servlet-name>
  <servlet-class>org.apache.axis.transport.http.AxisServlet</servlet-class>
  <init-param>
   <!-- 
				Setting use-servlet-security to 1 tells AXIS to us J2EE servlet security.
				See org.apache.axis.security.servlet.ServletSecurityProvider
				"By utilizing this class (which the AxisServlet can be configured to do automatically), 
				authentication and role information will come from your servlet engine."
			-->
   <param-name>use-servlet-security</param-name>
   <param-value>1</param-value>
  </init-param>
 </servlet>
 <servlet>
  <display-name>Apache-Axis Admin Servlet</display-name>
  <servlet-name>AdminServlet</servlet-name>
  <servlet-class>org.apache.axis.transport.http.AdminServlet</servlet-class>
  <load-on-startup>100</load-on-startup>
 </servlet>
 <!--
	The WADOServlet class can enforce real WADO, VA-style WADO or Exchange-style WAI 
	semantics.  The "semantics" parameter tells it what semantics to apply.
	Previously the servlet would look at the path of each request to determine the
	semantics but this was determined to be fragile.  Specifying the semantics in
	an init parameter means that there must be an instance of WADOServlet for each 
	semantics used, but in practice this has been one per web application anyway. 
	-->
 <servlet>
  <description>The servlet that retrieves images using WAI protocol</description>
  <display-name>WADO/WAI Servlet</display-name>
  <servlet-name>ImageServlet</servlet-name>
  <servlet-class>gov.va.med.imaging.vistarad.web.VistaRadImageAccessServlet</servlet-class>
 </servlet>
 <servlet>
  <description>The servlet that retrieves images using WAI protocol</description>
  <display-name>WADO/WAI Servlet</display-name>
  <servlet-name>CachedImageServlet</servlet-name>
  <servlet-class>gov.va.med.imaging.vistarad.web.VistaRadExamImageFromCacheAccessServlet</servlet-class>
 </servlet>
  <servlet>
  <description>The servlet that retrieves images using WAI protocol</description>
  <display-name>Text Servlet</display-name>
  <servlet-name>TextServlet</servlet-name>
  <servlet-class>gov.va.med.imaging.vistarad.web.VistaRadTextFileServlet</servlet-class>
 </servlet>
 <servlet>
  <description>The servlet that retrieves images using WAI protocol</description>
  <display-name>Exam Image Text Servlet</display-name>
  <servlet-name>ExamImageTextServlet</servlet-name>
  <servlet-class>gov.va.med.imaging.vistarad.web.VistaRadExamImageTextFileServlet</servlet-class>
 </servlet>
 <servlet>
  <description>The servlet that retrieves images using WAI protocol</description>
  <display-name>Cached Exam Image Text Servlet</display-name>
  <servlet-name>CachedExamImageTextServlet</servlet-name>
  <servlet-class>gov.va.med.imaging.vistarad.web.VistaRadExamImageTextFileFromCacheServlet</servlet-class>
 </servlet>
 <servlet-mapping>
  <servlet-name>AxisServlet</servlet-name>
  <url-pattern>/vistarad-ws/*</url-pattern>
 </servlet-mapping>
 <servlet-mapping>
  <servlet-name>ImageServlet</servlet-name>
  <url-pattern>/vistarad/image</url-pattern>
 </servlet-mapping>
 <servlet-mapping>
  <servlet-name>CachedImageServlet</servlet-name>
  <url-pattern>/vistarad/cachedimage</url-pattern>
 </servlet-mapping>
 <servlet-mapping>
  <servlet-name>TextServlet</servlet-name>
  <url-pattern>/vistarad/text</url-pattern>
 </servlet-mapping>
 <servlet-mapping>
  <servlet-name>ExamImageTextServlet</servlet-name>
  <url-pattern>/vistarad/imagetext</url-pattern>
 </servlet-mapping>
 <servlet-mapping>
  <servlet-name>CachedExamImageTextServlet</servlet-name>
  <url-pattern>/vistarad/cachedimagetext</url-pattern>
 </servlet-mapping>
 <!-- uncomment this if you want the admin servlet -->
 <servlet-mapping>
  <servlet-name>AdminServlet</servlet-name>
  <url-pattern>/servlet/AdminServlet</url-pattern>
 </servlet-mapping>
 <welcome-file-list>
  <welcome-file>index.jsp</welcome-file>
 </welcome-file-list>
 <security-constraint>
  <display-name>ClinicalDisplayWebServiceConstraint</display-name>
  <web-resource-collection>
   <web-resource-name>Clinical Display Webservices</web-resource-name>
   <description>The clinical display webservices are protected with homegrown security</description>
   <url-pattern>/vistarad-ws/*</url-pattern>
  </web-resource-collection>
  <auth-constraint>
   <description>A vista user is authenticated against the Vista system</description>
   <role-name>clinical-display-user</role-name>
  </auth-constraint>
  <user-data-constraint>
   <description>The transport does not have to be guaranteed just the user authenticated</description>
   <transport-guarantee>NONE</transport-guarantee>
  </user-data-constraint>
 </security-constraint>
 <security-constraint>
  <display-name>ImageAccessConstraint</display-name>
  <web-resource-collection>
   <web-resource-name>ImageAccessServlet</web-resource-name>
   <description>Access to images is restricted to known user roles</description>
   <url-pattern>/vistarad/*</url-pattern>
  </web-resource-collection>
  <auth-constraint>
   <role-name>clinical-display-user</role-name>
   <role-name>vista-user</role-name>
   <role-name>peer-vixs</role-name>
  </auth-constraint>
  <user-data-constraint>
   <description>The transport does not have to be guaranteed just the user authenticated</description>
   <transport-guarantee>NONE</transport-guarantee>
  </user-data-constraint>
 </security-constraint>
 <login-config>
  <auth-method>BASIC</auth-method>
  <realm-name>VistaRealm</realm-name>
 </login-config>
 <security-role>
  <description>A user of the clinical display application</description>
  <role-name>clinical-display-user</role-name>
 </security-role>
 <security-role>
  <description>A VistaImaging user authenticated against VistaImaging</description>
  <role-name>vista-user</role-name>
 </security-role>
 <security-role>
  <description>An administrator</description>
  <role-name>administrator</role-name>
 </security-role>
 <security-role>
  <description>A peer ViXS server Authentication by certificate</description>
  <role-name>peer-vixs</role-name>
 </security-role>
 <resource-ref>
  <description>The VIX Core</description>
  <res-ref-name>CoreRouter</res-ref-name>
  <res-type>gov.va.med.imaging.core.interfaces.Router</res-type>
  <res-auth>Container</res-auth>
 </resource-ref>
 <resource-ref>
  <description>The VIX Core Application Configuration</description>
  <res-ref-name>AppConfiguration</res-ref-name>
  <res-type>gov.va.med.imaging.core.interfaces.IAppConfiguration</res-type>
  <res-auth>Container</res-auth>
 </resource-ref>
 <resource-ref>
  <description>The factory that creayes he router commands.</description>
  <res-ref-name>CommandFactory</res-ref-name>
  <res-type>gov.va.med.imaging.core.interfaces.router.CommandFactory</res-type>
  <res-auth>Container</res-auth>
 </resource-ref>
</web-app>
