MAGDDW1 ;WOIFO/PMK - Generate a DICOM message ; 01 Nov 2006  3:10 PM
 ;;3.0;IMAGING;**10,49**;Mar 19, 2002;Build 2201;Jun 29, 2011
 ;; Per VHA Directive 2004-038, this routine should not be modified.
 ;; +---------------------------------------------------------------+
 ;; | Property of the US Government.                                |
 ;; | No permission to copy or redistribute this software is given. |
 ;; | Use of unreleased versions of this software requires the user |
 ;; | to execute a written test agreement with the VistA Imaging    |
 ;; | Development Office of the Department of Veterans Affairs,     |
 ;; | telephone (301) 734-0100.                                     |
 ;; | The Food and Drug Administration classifies this software as  |
 ;; | a medical device.  As such, it may not be changed in any way. |
 ;; | Modifications to this software may result in an adulterated   |
 ;; | medical device under 21CFR820, the use of which is considered |
 ;; | to be a violation of US Federal Statutes.                     |
 ;; +---------------------------------------------------------------+
 ;;
 ; PACS interface -- PACS DICOM data output routine #1
 ;
REQUEST ; Entry point for SEND_REQUEST message (all messages except response)
 N SENDTYPE ;- type of message being sent (request or response)
 S SENDTYPE="REQUEST" G START
 ;
RESPONSE ; Entry point for the SEND_RESPONSE message only
 N SENDTYPE ;- type of message being sent (request or response)
 S SENDTYPE="RESPONSE" G START
 ;
START ; Get the next file number and DICOM ID for this message
 N BYTEORDR ;- byte order for message, always little endian
 N DEBUG ;---- debug output control
 N D0
 N DIMSE ;---- DICOM Message Service Element
 N EXPLICIT ;- explicit/implicit VR flag
 N INODE ;---- node in ^TMP global for DICOM data storage
 N MSGID ;---- DICOM message id
 ; N QUEUEOUT ;- output file array
 N SOPCLASS ;- SOP Class of message being created and sent
 N TEMPLATE ;- message ien in the template file
 N TYPEID ;--- id of type of event within SOP class
 N X,Y
 ;
 S DEBUG=1 ; DEBUG=2 gives group & element level trace messages
 ;
 I FILEMODE="FIFO QUEUE","OPEN"[MULTIMSG D
 . ; get the filename for a single message or the first multiple message
 . ; get the path to the site's shared file directory
 . S QUEUEOUT("DATAPATH")=$$DATAPATH^MAGDQUE2("INCOMING",SENDTYPE,PRIORITY,CHANNEL)
 . S QUEUEOUT("FPTRPATH")=^MAGDICOM(2006.563,1,"DATA PATH",CHANNEL,0)
 . S D0=^MAGDICOM(2006.564,"X","OUTGOING",SENDTYPE,PRIORITY)
 . S QUEUEOUT("QLETTER")=$P(^MAGDICOM(2006.564,D0,0),"^")
 . ; read the queue write pointer and increment it
 . D GETWPTR^MAGDQUE0
 . Q
 I FILEMODE="DIRECT","OPEN"[MULTIMSG,DEBUG D  ; output file info
 . S X="FILE "_QUEUEOUT("FILE")_" -- "_MESSAGE_" -- "_MSGHANDL
 . D MESSAGE^MAGDMLOG($S(DEBUG=2:2,1:1),0,X,"V")
 . Q
 ;
 ; Get the DICOM Message ID and save current counters
 S D0=^MAGDICOM(2006.564,"X","OUTGOING",SENDTYPE,PRIORITY)
 S MSGID=$P(^MAGDICOM(2006.564,D0,0),"^",3)+1
 I MSGID>65535 S MSGID=0  ; wrap around for a 2-byte unsigned integer
 S $P(^MAGDICOM(2006.564,D0,0),"^",3)=MSGID ; current message id
 D SAVE^MAGDFCNS("0000,0110",MSGID) ; message id
 ;
 ; Get the Group 0000 Process Priority
 S Y=$S(PRIORITY="HIGH":1,PRIORITY="MEDIUM":0,PRIORITY="LOW":2,1:0)
 D SAVE^MAGDFCNS("0000,0700",Y) ; priority
 ;
 D MSGHNDL ; output the message handle
 I SENDTYPE="REQUEST" D SENDREQ ; Processing for SEND_REQUEST messages
 ;
 ; save the DICOM Message Service Element header
 D SOPCLASS ; get the SOP Class information for the message
 I DIMSE="N-EVENT-REPORT" D SAVE^MAGDFCNS("0000,1002",TYPEID) ; event id
 ;
 S EXPLICIT=0 D OUTPUT^MAGDDW2 ; output the data
 ;
 I "CLOSE"[MULTIMSG D
 . I FILEMODE="FIFO QUEUE" D
 . . ; close the file for a single message or the last multiple message
 . . D FINISHW^MAGDQUE0 ; rename the file and bump the file pointer
 . . D OUTGOING^MAGDAUD2 ; update audit record
 . . Q
 . ;
 . I ^MAGDICOM(2006.563,1,"ASCII DICOM TEXT")="YES" D  ; generate text file
 . . ; save ASCII text copy of message just generated in the *.TXT file
 . . N QUEUEIN ;-- input file array
 . . S QUEUEIN("FILE")=QUEUEOUT("FILE"),INODE="TMP" D TEXTCOPY^MAGDDR1
 . . Q
 . ;
 . Q
 Q
 ;
SOPCLASS ; save the affected SOP class UID (entry point from ECHO^MAGDCST2)
 N X
 S TEMPLATE=$O(^MAGDICOM(2006.52,"B",MESSAGE,""))
 I TEMPLATE="" D  Q
 . D MESSAGE^MAGDMLOG(1,0,"Undefined Message Template: "_MESSAGE,"VB")
 . Q
 S X=^MAGDICOM(2006.52,TEMPLATE,0)
 S DIMSE=$P(X,"^",2),SOPCLASS=$P(X,"^",3),TYPEID=$P(X,"^",5)
 D SAVE^MAGDFCNS("0000,0002",$$GETUID^MAGDUID1(SOPCLASS))
 Q
 ;
MSGHNDL ; Generate the Message Handle
 N TAG
 S TAG="FFFD,xx10,VA DHCP"
 D MULTLINE^MAGDHRC6(TAG,MESSAGE_$C(13,10)) ; message
 D MULTLINE^MAGDHRC6(TAG,$P(QUEUEOUT("FILE"),".")_".DCM"_$C(13,10)) ; full file path
 D MULTLINE^MAGDHRC6(TAG,MSGHANDL) ; global message handle
 Q
 ;
SENDREQ ; Processing for SEND_REQUEST messages
 ; save Instance Creation Date/Time & Creator UID for message
 D CREATION^MAGDUID1
 ;
 ; Fill in the header SOP Class & Instance UID fields
 ;
 I MESSAGE="VERIFICATION ECHO REQUEST" Q
 ;
 ; Get the SOP Instance UID
 D  ; get the type of UID
 . I $D(UIDTYPE) Q  ; don't set UIDTYPE to a different value
 . I MESSAGE="PATIENT DEMOGRAPHIC CHANGE" S UIDTYPE="PATIENT" Q
 . I MESSAGE="ADT ADMIT" S UIDTYPE="VISIT" Q
 . I MESSAGE="ADT TRANSFER" S UIDTYPE="VISIT" Q
 . I MESSAGE="ADT DISCHARGE" S UIDTYPE="VISIT" Q
 . I MESSAGE="EXAM PULL REQUEST" S UIDTYPE="VISIT" Q
 . I MESSAGE="ORDER ENTRY" S UIDTYPE="STUDY" Q
 . I MESSAGE="EXAM CHANGE" S UIDTYPE="STUDY" Q
 . I MESSAGE="EXAM VERIFICATION" S UIDTYPE="STUDY" Q
 . I MESSAGE="TRANSCRIBED REPORT" S UIDTYPE="INTERP" Q
 . I MESSAGE="APPROVED REPORT" S UIDTYPE="INTERP" Q
 . Q
 ;
 I '$D(UIDTYPE) D
 . N MSG
 . S MSG="Warning: no SOP instance UID for MESSAGE="""_MESSAGE_""""
 . D MESSAGE^MAGDMLOG(1,0,MSG,"BV")
 . Q
 E  D SAVE^MAGDFCNS("0000,1000",UID(UIDTYPE))
 Q
