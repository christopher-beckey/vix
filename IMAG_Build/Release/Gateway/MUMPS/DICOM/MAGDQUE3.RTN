MAGDQUE3 ;WOIFO/PMK - Handle DICOM query messages and generate the response ; 09/08/2004  07:28
 ;;3.0;IMAGING;**30**;MAR 19, 2002;;NOV 5, 2004
 ;; Per VHA Directive 2004-038, this routine should not be modified.
 ;; +---------------------------------------------------------------+
 ;; | Property of the US Government.                                |
 ;; | No permission to copy or redistribute this software is given. |
 ;; | Use of unreleased versions of this software requires the user |
 ;; | to execute a written test agreement with the VistA Imaging    |
 ;; | Development Office of the Department of Veterans Affairs,     |
 ;; | telephone (301) 734-0100.                                     |
 ;; | The Food and Drug Administration classifies this software as  |
 ;; | a medical device.  As such, it may not be changed in any way. |
 ;; | Modifications to this software may result in an adulterated   |
 ;; | medical device under 21CFR820, the use of which is considered |
 ;; | to be a violation of US Federal Statutes.                     |
 ;; +---------------------------------------------------------------+
 ;;
 ; XXXXXX  XXXX XXXXXX  XXXXXXX   XXXX  XXXXXX
 ;  XX  XX  XX   XX  XX  XX   X  XX  XX X XX X
 ;  XX  XX  XX   XX  XX  XX X   XX        XX
 ;  XX  XX  XX   XXXXX   XXXX   XX        XX
 ;  XX  XX  XX   XX XX   XX X   XX    X   XX
 ;  XX  XX  XX   XX  XX  XX   X  XX  XX   XX
 ; XXXXXX  XXXX XXX  XX XXXXXXX   XXXX   XXXX
 ;
 ; This routine completely handles DICOM messages without the FIFO
 ; queuing mechanism supported by the other ^MAGDQUE* routines.
 ; The same MUMPS process is used for both TCP/IP communications
 ; and for handling the generation of the response.
 ;
 ; Incoming messages are stored in file INCOMING.DCM.  The response
 ; is stored in file OUTGOING.DCM.  The files are reused each time.
 ;
ENTRY(IP,PORT) ; loop transferring DICOM files between TCP/IP and the FIFO Queues
 N INODE
 N QUEUEIN ;-- input file array
 N QUEUEOUT ;- output file array
 N PDUACSE,PDUDATA,PDUERR,PDUNULL ; switch case values
 N PRIORITY
 N RECVTYPE
 N TICKER ;--- ticker counter for idle loop
 N ODEVNAME,ODEVTYPE,II
 ;
 S PDUERR=-1,PDUNULL=0,PDUACSE=1,PDUDATA=2
 ;
 F II=1:1 D  Q:X=PDUACSE  Q:X=PDUERR  Q:DONEFLAG
 . S DONEFLAG=0 ; set in routine invoked by ^MAGDQUE4 when done
 . S X=$$RECEIVE(IP,PORT)
 . I X=PDUNULL D IDLE^MAGDBB(.TICKER,$G(FBSWITCH)'="BACKGROUND",1) Q
 . Q:X'=PDUDATA
 . ;
 . ; process the incoming DICOM message file
 . D MESSAGE^MAGDMLOG(1,0,"Reading "_INCOMING,"V")
 . S QUEUEIN("FILE")=INCOMING,QUEUEOUT("FILE")=OUTGOING
 . ;
 . ; read the DICOM file and save a copy to the ASCII text file
 . I ^MAGDICOM(2006.563,1,"ASCII DICOM TEXT")="YES" D  ; generate text file
 . . S INODE="IN" D TEXTCOPY^MAGDDR1
 . . Q
 . E  D  ; skip text file generation
 . . S (ODEVNAME,ODEVTYPE)="",INODE="IN" D ENTRY^MAGDDR2
 . . Q
 . ;
 . D ENTRY^MAGDQUE4 ; process the DICOM message
 . ;
 . ; send the response
 . I RECVTYPE="REQUEST" S X=$$SENDDATA^MAGDTCP2(OUTGOING,IP,PORT)
 . ;
 . Q
 Q
 ;
RECEIVE(IP,PORT) ; get the data packet from TCP/IP
 ; and store it into the PDU INPUT file
 N COMMAND ;-- DICOM command element
 N DATASET,FILEMODE,FILESIZE,INODE,PDULEN,STATUS,X
 ;
 S X=$$RECEIVE^MAGDTCP3(PDUIN,.PDUTYPE,.PDULEN,IP,PORT)
 ;
 I X'=PDUDATA Q X ; quit if not DATA PDU
 ;
 S FILEMODE="DIRECT" ; use direct communications, not the FIFO queues
 ;
 ; process the incoming DICOM message
 D RECVCMD^MAGDTCP3(PDUIN,.PDULEN,IP,PORT) ; get the DICOM data file
 ;
 ; read the Message Command information to determine the input queue
 S QUEUEIN("FILE")=PDUIN,(ODEVTYPE,ODEVNAME)="",INODE="IN"
 D ENTRY^MAGDDR2 ; parse the Message Command Protocol Data Value
 S COMMAND=$G(^TMP("MAG",$J,"DICOM","IN","0000,0100",1,1))
 S RECVTYPE=$S(COMMAND>$$HEX2DEC^MAGOSMSC("8000"):"RESPONSE",1:"REQUEST")
 S PRIORITY=$G(^TMP("MAG",$J,"DICOM","IN","0000,0700",1,1))
 S PRIORITY=$S(PRIORITY=1:"HIGH",PRIORITY=2:"LOW",1:"MEDIUM")
 ;
 ; display the incoming file name on the monitor
 D MESSAGE^MAGDMLOG(0,0,INCOMING,"V")
 ;
 ; copy the Message Command information to the DICOM data file
 S STATUS=$$OPEN^MAGOSFIL(PDUIN,"B")
 I STATUS<0 D
 . N M
 . S M="Could not open file """_PDUIN_""" for Binary Read."
 . W:$$USEPRIN^MAGOSFIL(1) !!!,M,!,STATUS
 . S $EC=",U"_M_","
 . Q  ; Error trap does not return
 S STATUS=$$OPEN^MAGOSFIL(INCOMING,"W")
 I STATUS<0 D
 . N M
 . S M="Could not open file """_INCOMING_""" for Write."
 . W:$$USEPRIN^MAGOSFIL(1) !!!,M,!,STATUS
 . S $EC=",U"_M_","
 . Q  ; Error trap does not return
 F  S X=$$READSTAR^MAGOSFIL(PDUIN) Q:X<0  S STATUS=$$USE^MAGOSFIL(INCOMING) W *X
 S STATUS=$$CLOSE^MAGOSFIL(PDUIN)
 S STATUS=$$CLOSE^MAGOSFIL(INCOMING)
 I $$USEPRIN^MAGOSFIL(1)
 ;
 ; check if there is a Message Data Set
 S DATASET=$G(^TMP("MAG",$J,"DICOM","IN","0000,0800",1,1))
 I DATASET'=$$HEX2DEC^MAGOSMSC("0101") D  ; Data Set is not Null
 . ; transfer the Message Data Set information to the DICOM file
 . D RECVDATA^MAGDTCP3(INCOMING,.PDULEN,IP,PORT)
 . Q
 ;
 Q PDUDATA
 ;
INIT ; called by ^MAGDACP1 to initialize common variables
 S DEBUG=0 ; turn off debugging messages
 ; get the TCP/IP message directory
 S INCOMING=LOGDIR_"\INCOMING.DCM"
 S OUTGOING=LOGDIR_"\OUTGOING.DCM"
 S PORT=$G(^TMP("MAG",$J,"DICOM","PORT"))
 Q
