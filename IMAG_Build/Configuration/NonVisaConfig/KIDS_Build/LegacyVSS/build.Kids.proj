<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="publish" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<Import Project="$(MSBuildExtensionsPath)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets"/>
	<Import Project="C:\Program Files\MSBuild\ExtensionPack\4.0\MSBuild.ExtensionPack.tasks"/> 
	<PropertyGroup>
		<NmakeHome>C:\Program Files\Microsoft Visual Studio 10.0\VC\bin\</NmakeHome>
		<PatchName>Version 3.0 Patch 135 - Emergency Patch for MAG 3.0 121</PatchName>
		<PatchNumber>135</PatchNumber>		
		<SecLineOne>%20%3B%3B3.0%3BIMAGING%3B%2A%2A</SecLineOne>
		<SecLineTwo>**%3B~date~</SecLineTwo>
		<TempDelete>false</TempDelete>
		<RootDir>E:\Builds\</RootDir>
		<Version>3.0</Version>
		<NetworkBuildDir>\\vhaiswclu4\common$\builds</NetworkBuildDir>			
		<ProjectName>KIDS\</ProjectName>
		<PatchFolderName>V$(Version)p$(PatchNumber)Build$(BuildNumber)</PatchFolderName>
		<FullBuildPath>$(RootDir)$(ProjectName)$(PatchFolderName)</FullBuildPath>
		<TF>"C:\Program Files\Microsoft Visual Studio 10.0\Common7\IDE\tf.exe"</TF>	
		<TFSVistaSourceLocation>$/VistA_Imaging/LegacyVSS/Vista/VistAImaging</TFSVistaSourceLocation>	
		<TFSReleaseSourceLocation>$/VistA_Imaging/Release</TFSReleaseSourceLocation>	
		<TFSWorkspaceDir>E:\TFS1\VistA_Imaging</TFSWorkspaceDir>		
		<DiffUtilDir>C:\Program Files\GnuWin32\bin</DiffUtilDir>		
		<TestNumber>12</TestNumber>
		<CCSnapshotDir>E:\CC1\IMAG_bld</CCSnapshotDir>
		<VSSWorkspaceDir>C:\VSS</VSSWorkspaceDir>			
		<TempFolder>\temp</TempFolder>
		<ReleaseDir>..\..\..\..\..\..\Release</ReleaseDir>		
		<ToolsDir>..\..\..\..\..\..\Tools</ToolsDir>				
		<ConfigurationDir>..\..\..\..\</ConfigurationDir>	
		<VSS1RootDir>..\..\..\..\..\..\LegacyVSS\VSS1</VSS1RootDir>
		<VSSUsername>vhaiswklinke</VSSUsername>
		<VSSPassword></VSSPassword>		
		<VistaVistaImagingDir>..\..\..\..\..\..\LegacyVSS\Vista</VistaVistaImagingDir>
		<DiffReportName>MAG3_0P$(PatchNumber)T$(TestNumber)Bld$(BuildNumber)Kids_Diff_Rpt.txt</DiffReportName>
		<MumpsformatterHome>$(FullBuildPath)$(TempFolder)\Utilities\Compiled</MumpsformatterHome>
	</PropertyGroup>
	
 	<UsingTask TaskName="ProcessSecondLine" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
		  <ParameterGroup>
			<Routine ParameterType="System.String" Required="true" />
			<BaselineDir ParameterType="System.String" Required="true" />
			<PatchNumber ParameterType="System.String" Required="true" />
			<FilteredLine ParameterType="System.String" Output="true" />		
		</ParameterGroup>
		<Task>
			<Using Namespace="System.Text.RegularExpressions" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
					int posone; string p; int postwo; int substrlength; string line;
					string comma=""; 
					string routineloc=BaselineDir + Routine;
					string trimmedp="";
					if (Directory.GetFiles(BaselineDir,Routine).Length > 0){  //check that the rtn or dic is in the baseline
						StreamReader sr = new StreamReader(routineloc);
						line = sr.ReadLine();  //read second line of rtn or dic.
						line = sr.ReadLine();
						if (line.IndexOf("**")!=-1){}
						
						else{       //after first run of mumpsformatter 'second line' is now on the fifth line.
							line = sr.ReadLine();  
							line = sr.ReadLine();
							line = sr.ReadLine(); 
							}
						if (line.IndexOf("**")!=-1){	
							posone = line.IndexOf("**") + 2;
							postwo = line.LastIndexOf("**");
							substrlength=postwo-posone;
							p = line.Substring(posone, substrlength); //get the string between ** and **
							Match m=Regex.Match(p,PatchNumber);
							if (m.Success){
								p=Regex.Replace(p,PatchNumber,"");} //Remove duplicate patch folder if it exists.
								trimmedp= p.TrimEnd(','); //Remove extra comma if it exists.
								comma=",";
							if (string.IsNullOrEmpty(trimmedp)){
								comma="";}
							}	
						sr.Close();	
					}
					string fullsecondline=" ;;3.0;IMAGING;**"+trimmedp+comma+PatchNumber+"**;~date~";
					FilteredLine=fullsecondline; 
				]]>
			</Code>
		</Task>
	</UsingTask>	
	
	<UsingTask TaskName="GetPatchNumbers" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
		<ParameterGroup>
			<PatchNumber ParameterType="System.String" Required="true" />
			<PatchSeqFile ParameterType="System.String" Required="true" />
			<PatchType ParameterType="System.String" Required="true" />
			<ItemList ParameterType="System.String" Output="true" />
			<DicomList ParameterType="System.String" Output="true" />
			<Depen ParameterType="System.String" Output="true" />
			<Env ParameterType="System.String" Output="true" />
			<Pre ParameterType="System.String" Output="true" />
			<Post ParameterType="System.String" Output="true" />
			<NoDelete ParameterType="System.Int32" Output="true" />	
		</ParameterGroup>	
		<Task>
			<Reference Include="System.Xml" />	
			<Using Namespace="System.Xml" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
					string name,sname,order,Type,status,depen,pre,env,post,nodelete;
					string Status="";
					string Order="";
					string type="";
					int patch= Convert.ToInt32(PatchNumber);
					int Release=0;
					string kidspatchlist="";
					string dicompatchlist="";
					string[] porder = new string[200];
					string[] patchtype = new string[200];
					string[] Hist = new string[200];
					XmlDocument xml = new XmlDocument();
					xml.Load(PatchSeqFile); 
					foreach(XmlNode xn in xml.SelectNodes("//legacyvss/patches/patch"))
					{				
					
						name=xn.SelectSingleNode("name").InnerText;
						sname=xn.SelectSingleNode("sname").InnerText;
						type=xn.SelectSingleNode("type").InnerText;
						order=xn.SelectSingleNode("order").InnerText;
						status=xn.SelectSingleNode("status").InnerText;
						depen=xn.SelectSingleNode("depen").InnerText;
						pre=xn.SelectSingleNode("pre").InnerText;
						post=xn.SelectSingleNode("post").InnerText;
						env=xn.SelectSingleNode("Env").InnerText;
						nodelete=xn.SelectSingleNode("nodelete").InnerText;

						if (sname == PatchNumber)
						{
							Type = type;
							Order = order;
							Status = status;
							if(depen=="null")
								Depen="";
							else
								Depen=depen;
							if(pre=="null")
								pre="";
							else
								Pre=pre;
							if(post=="null")
								Post="";
							else
								Post=post;
							if(env=="null")
								Env="";
							else
								Env=env;
							if(nodelete=="null")
								NoDelete=0;
							else
								NoDelete=1;
						}
						
						if (type == "FUT"){
							continue;}
						int neworder = Convert.ToInt32(order);
						
						porder[neworder] = sname;
						patchtype[neworder] = type;
						if ((status == "release") && (neworder > Release))
						{
							Release = neworder; // track highest release order in sequence
						}
					} //for
					
					if (Status == "release")
					{
						Release = 0;
					}
					int newOrder=Convert.ToInt32(Order);
					for (int i=0;i<200;i++)
					{
						if ((i > Release) && (i < newOrder))
						{
							kidspatchlist=kidspatchlist+porder[i]+",";
							if((PatchType=="Dicom")&&(patchtype[i]=="DICOM")){
								dicompatchlist=dicompatchlist+porder[i]+",";}
						} //if
					} //for
					if(PatchType=="Kids"){
						ItemList=kidspatchlist+patch;}
					if(PatchType=="Dicom"){
						ItemList=dicompatchlist+patch;}
				]]>		 
			</Code>
		</Task>
	</UsingTask>	
		
	<UsingTask TaskName="GetPatchFolderNames" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
		<ParameterGroup>
			<PatchNumber ParameterType="System.String" Required="true" />
			<PatchSeqFile ParameterType="System.String" Required="true" />
			<PatchFolderName ParameterType="System.String" Output="true" />
		</ParameterGroup>	
		<Task>
			<Reference Include="System.Xml" />	
			<Using Namespace="System.Xml" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
					XmlDocument file = new XmlDocument();
					file.Load(PatchSeqFile);
					XmlNodeList elemList = file.GetElementsByTagName("sname");
					for (int i=0; i < elemList.Count; i++)
					{   
						if (PatchNumber==elemList[i].InnerXml){
						XmlNodeList name = file.GetElementsByTagName("name");
						PatchFolderName=name[i].InnerXml;} //return the patch folder name in TFS, e.g., Version 3.0 Patch 034 - Storing DICOM Objects, Phase IV
					}  
				]]>		 
			</Code>
		</Task>
	</UsingTask>	
 
 	<Target Name="UpdateVSS" >
		<RemoveDir directories="$(VSSWorkspaceDir)" />
		<MakeDir directories="$(VSSWorkspaceDir)\LegacyVSS\Vista" />
		<MakeDir directories="$(VSSWorkspaceDir)\LegacyVSS\Configuration\NonVisaConfig\MumpsFormatter" />		
		<VssGet UserName="$(VSSUsername)"
            Password="$(VSSPassword)"
            LocalPath="$(VSSWorkspaceDir)\LegacyVSS\Vista"
			Writable="true"
            Recursive="true"
            DatabasePath="\\VHAISWIMGS15\Vista_vss$\srcsafe.ini"
			Replace="true"
			Path="$/" 
			Condition="'$(UpdateVSS)'!='false'"/>
		<VssGet UserName="$(VSSUsername)"
            Password="$(VSSPassword)"
            LocalPath="$(VSSWorkspaceDir)\LegacyVSS\Configuration\NonVisaConfig\MumpsFormatter"
            Recursive="true"
			Replace="true"
            DatabasePath="\\VHAISWIMM7\vss$\srcsafe.ini"
			Path="$/MumpsFormatter" 
			Condition="'$(UpdateVSS)'!='false'"/>	
	</Target>		
 
 	<Target Name="UpdateTFS" DependsOnTargets="UpdateVSS">	
		<Exec Command="$(TF) get $(TFSVistaSourceLocation) /recursive /version:T /noprompt /login:harris-hc-lab\$(TFSusername),$(TFSPassword)" WorkingDirectory="$(TFSWorkspaceDir)" Condition="'$(UpdateTFS)'!='false'" />	
		<Exec Command="$(TF) get $(TFSReleaseSourceLocation)/VistA /recursive /version:T /noprompt /login:harris-hc-lab\$(TFSusername),$(TFSPassword)" WorkingDirectory="$(TFSWorkspaceDir)" Condition="'$(UpdateTFS)'!='false'" />	
	</Target>	
 
	<Target Name="UpdateClearCase" DependsOnTargets="UpdateTFS" >
		<Exec Command='"ClearTool.exe" update -force $(CCSnapshotDir)\Configuration\NonVisaConfig' Condition="'$(UpdateClearCase)'!='false'" ContinueOnError="false" />
		<Exec Command='"ClearTool.exe" update -force $(CCSnapshotDir)\LegacyVSS\Vista' Condition="'$(UpdateClearCase)'!='false'"  ContinueOnError="false" />
		<Exec Command='"ClearTool.exe" update -force $(CCSnapshotDir)\Release\VistA' Condition="'$(UpdateClearCase)'!='false'" ContinueOnError="false" />
	</Target>

	<Target Name="CreateItemGroups" DependsOnTargets="UpdateClearCase">
		<ItemGroup>
			<Utilities Include="$(FullBuildPath)$(TempFolder)\Utilities\MagCheck\release\MagCheck.exe; $(FullBuildPath)$(TempFolder)\Utilities\MakeKid\release\MakeKID.exe; $(FullBuildPath)$(TempFolder)\Utilities\MumpsFormatter\release\MumpsFormatter.exe"  /> 
			<MumpsBaseline Include="$(ReleaseDir)\VistA\Apps\*.*" /> <!-- get mumps baseline from Release -->
			<KidsFiles Include="$(VistaVistaImagingDir)\VistaImaging\$(PatchName)\KIDS_Components\*.*" Exclude="$(VistaVistaImagingDir)\VistaImaging\$(PatchName)\KIDS_Components\*.scc" />
			<SecondLineFile Include="$(FullBuildPath)$(TempFolder)\MUMPS\Work\2nd_Line.txt" />
			<GatewayProjectDirectory Include="$(MSBuildProjectDirectory)\..\..\.." />
			<UtilitiesSource Include="$(ToolsDir)\MumpsFormatter\**\*.*" > <!--add from VSS1 -->
				<ParentFolder>MumpsFormatter</ParentFolder>
			</UtilitiesSource>	
			<UtilitiesSource Include="$(ToolsDir)\MagCheck\**\*.*" >
				<ParentFolder>MagCheck</ParentFolder>
			</UtilitiesSource>
			<UtilitiesSource Include="$(ToolsDir)\MakeKid\**\*.*" >
				<ParentFolder>MakeKid</ParentFolder>
			</UtilitiesSource>
		</ItemGroup>
	</Target>	
	
	<!-- =============== Delete previous build (if build folder exists) ================== -->
	<Target Name="CleanPreviousBuild" DependsOnTargets="CreateItemGroups" >
		<RemoveDir Directories="$(FullBuildPath)" />
	</Target> 

 <!-- =============== ================== -->
	<Target Name="GetPatchMumpsDepNumbers" DependsOnTargets="CleanPreviousBuild" >
		<GetPatchNumbers
			PatchNumber="$(PatchNumber)"
			PatchType="Kids"
			PatchSeqFile="..\..\..\Build_Sequence.xml" >
			<Output PropertyName="PatchDep" TaskParameter="ItemList" />
			<Output PropertyName="Depen" TaskParameter="Depen" />
			<Output PropertyName="Pre" TaskParameter="Pre" />
			<Output PropertyName="Post" TaskParameter="Post" />
			<Output PropertyName="NoDelete" TaskParameter="Nodelete" />
			<Output PropertyName="Env" TaskParameter="Env" />
		</GetPatchNumbers>	
		<message text="Patch number is $(PatchDep)" Importance="High"/>
	</Target> 
 
	<!-- ===============Split the Depen and PatchDep properties into Itemgroups ================== -->
	<Target Name="SplitDepProperties" DependsOnTargets="GetPatchMumpsDepNumbers" >
		<ItemGroup>
			<SplitDepen Include="$(Depen.Split(','))" />
			<SplitPatchDep Include="$(PatchDep.Split(','))" />
		</ItemGroup>
		<message text="Patch number is @(SplitPatchDep)" Importance="High"/>
	</Target>
	
	<!-- ============== Create an Itemgroup out of the patch dependencies =========================== -->
	<Target Name="SetDependencies" Outputs="%(SplitPatchDep.Identity)" DependsOnTargets="SplitDepProperties" >
		<GetPatchFolderNames
			PatchNumber="@(SplitPatchDep)"
			PatchSeqFile="..\..\..\Build_Sequence.xml" >
			<Output PropertyName="Patch" TaskParameter="PatchFolderName" />
		</GetPatchFolderNames>			

		<ItemGroup>	
			<Dependency Include="$(VistaVistaImagingDir)\VistaImaging\$(Patch)\MUMPS\VISTA\*.RTN; $(VistaVistaImagingDir)\VistaImaging\$(Patch)\MUMPS\DICOM\*.cache" >
				<FolderName>%(SplitPatchDep.Identity)</FolderName>
			</Dependency>		
		</ItemGroup>
	</Target>	
	
	<!-- =============== Create build ouput directories ================================== -->
	<Target Name="CreateDirectories" DependsOnTargets="SetDependencies">
		<MakeDir directories="$(FullBuildPath)$(TempFolder)"  />
		<MakeDir directories="$(FullBuildPath)$(TempFolder)\Utilities\MagCheck\"  />
		<MakeDir directories="$(FullBuildPath)$(TempFolder)\Utilities\MakeKid\"  />
		<MakeDir directories="$(FullBuildPath)$(TempFolder)\Utilities\MumpsFormatter\"  />
		<MakeDir directories="$(FullBuildPath)$(TempFolder)\Utilities\Compiled\"  />
		<MakeDir directories="$(FullBuildPath)$(TempFolder)\MUMPS\Baseline"  />
		<MakeDir directories="$(FullBuildPath)$(TempFolder)\MUMPS\Distrib"  />
		<MakeDir directories="$(FullBuildPath)$(TempFolder)\MUMPS\Work\" />
		<MakeDir directories="$(FullBuildPath)$(TempFolder)\P%(Dependency.FolderName)" />
	</Target>

	<!-- ======  Compare TFS and CC code and write to a text file which files differ ===== --> 
	<Target Name="TFS_CC_Diff" DependsOnTargets="CreateDirectories" >	
		<WriteLinesToFile File="$(FullBuildPath)\$(DiffReportName)" Lines="Comparing ClearCase against TFS for the following folders and subfolders-> LegacyVSS\Vista\VistAImaging and Release\Mumps"  Condition="'$(TFSCCDiff)'!='false'"/>
		<WriteLinesToFile File="$(FullBuildPath)\$(DiffReportName)" Lines="Comparing ClearCase against VSS for the following folders and subfolders-> LegacyVSS\Vista\VistAImaging\$(PatchName)"  Condition="'$(VSSCCDiff)'=='true'"/>
		<WriteLinesToFile File="$(FullBuildPath)\$(DiffReportName)" Lines="If there are no files listed there are no differences" Overwrite="false" />
		<WriteLinesToFile File="$(FullBuildPath)\$(DiffReportName)" Lines="===================================================================================================================================" Overwrite="false" />
		<Exec Command='"$(DiffUtilDir)\diff.exe" -i -w -r -q $(TFSWorkspaceDir)\LegacyVSS\Vista\VistAImaging $(CCSnapshotDir)\LegacyVSS\Vista\VistAImaging >> "$(FullBuildPath)\$(DiffReportName)"' IgnoreExitCode="true" Condition="'$(TFSCCDiff)'!='false'" />
		<Exec Command='"$(DiffUtilDir)\diff.exe" -i -w -r -q $(TFSWorkspaceDir)\Release\VistA $(CCSnapshotDir)\Release\VistA >> "$(FullBuildPath)\$(DiffReportName)"' IgnoreExitCode="true" Condition="'$(TFSCCDiff)'!='false'" />
		<Exec Command='"$(DiffUtilDir)\diff.exe" -i -w -r -q "$(VSSWorkspaceDir)\LegacyVSS\Vista\VistAImaging\$(PatchName)" "$(CCSnapshotDir)\LegacyVSS\Vista\VistAImaging\$(PatchName)" >> "$(FullBuildPath)\$(DiffReportName)"' IgnoreExitCode="true" Condition="'$(VSSCCDiff)'=='true'" />
		</Target>		
	
	<!-- ================== Copy files from source control over to build output directory ====================================================== -->
	<Target Name="CopyFiles"  DependsOnTargets="TFS_CC_Diff" >
		<Copy SourceFiles="@(UtilitiesSource)" DestinationFiles="@(UtilitiesSource->'$(FullBuildPath)$(TempFolder)\Utilities\%(ParentFolder)\%(RecursiveDir)%(Filename)%(Extension)')" />
		<Copy SourceFiles="@(MumpsBaseline)" DestinationFolder="$(FullBuildPath)$(TempFolder)\MUMPS\Baseline"/>
	</Target>

	<!-- ================== Update MakeKid Dep file============================= -->
	<Target Name="UpdateDep"  DependsOnTargets="CopyFiles" >
	<!-- When builds are done on non C: drive they fail because project can not find path to Accusoft files.  Create a new dep file with absolute path -->
		<ItemGroup>
			<DepFile Include=".\MakeKID.cpp : \%0D%0A %22.\MakeKID.h%22\%0D%0A%0D%0A.\StdAfx.cpp : \%0D%0A  %22C:\program files\microsoft visual studio\vc98\include\basetsd.h%22\%0D%0A  %22.\StdAfx.h%22\" />
		</ItemGroup>
	
		<message text="Creating empty file" Importance="High"/>
		<WriteLinesToFile File="$(FullBuildPath)$(TempFolder)\Utilities\MakeKid\MakeKid.dep.temp"	/>
		<MSBuild.ExtensionPack.FileSystem.File TaskAction="WriteLines" Files="$(FullBuildPath)$(TempFolder)\Utilities\MakeKid\MakeKid.dep.temp" Lines="@(DepFile)" TextEncoding="ASCII"/>
		<message text="Deleting original .dep file" Importance="High"/>
		<Delete Files="$(FullBuildPath)$(TempFolder)\Utilities\MakeKid\DCMAbstract.dep"	/>
		<message text="Renaming new .dep file" Importance="High"/>
		<Copy SourceFiles="$(FullBuildPath)$(TempFolder)\Utilities\MakeKid\MakeKid.dep.temp" DestinationFiles="$(FullBuildPath)$(TempFolder)\Utilities\MakeKid\MakeKid.dep"/>
		<Delete Files="$(FullBuildPath)$(TempFolder)\Utilities\MakeKid\MakeKid.dep.temp" />
	</Target>
	
	<Target Name="GetMumps" DependsOnTargets="UpdateDep" >
		<Copy SourceFiles="@(Dependency)" DestinationFolder="$(FullBuildPath)\$(TempFolder)\P%(Dependency.FolderName)"/>
	</Target>

 	<!-- ================== Compile C Utility projects ====================================================== -->
	<Target Name="Build_C_Utilites" DependsOnTargets="GetMumps" >
	<PropertyGroup>
		<UtilitiesPath>%(GatewayProjectDirectory.FullPath)</UtilitiesPath>
	</PropertyGroup>
		<Exec Command='"$(NmakeHome)nmake.exe" "CFG=MumpsFormatter - Win32 Release" /f MumpsFormatter.mak' WorkingDirectory="$(FullBuildPath)\$(TempFolder)\utilities\MumpsFormatter\" /> 
		<Exec Command='"$(NmakeHome)nmake.exe" "CFG=MagCheck - Win32 Release" /f MagCheck.mak' WorkingDirectory="$(FullBuildPath)\$(TempFolder)\utilities\MagCheck\" /> 
		<Exec Command='"$(NmakeHome)nmake.exe" "CFG=MakeKID - Win32 Release" /f MakeKID.mak' WorkingDirectory="$(FullBuildPath)\$(TempFolder)\utilities\MakeKID\" /> 
	</Target>

	<!-- ================== Copy build artifacts over to build output directory ====================================================== -->
	<Target Name="CopyArtifacts"  DependsOnTargets="Build_C_Utilites" >
		<Copy SourceFiles="@(Utilities)" DestinationFolder="$(FullBuildPath)\$(TempFolder)\Utilities\Compiled\"/>
	</Target>	

	<!-- ==================  Second Line processing on the Patch folder============================= -->
	<Target Name="SecondLineFirstPass" DependsOnTargets="CopyArtifacts" >

		<!-- Create 2nd_line.txt file and run Mumps Formatter on routines of patch folder being built -->
		<WriteLinesToFile File="@(SecondLineFile)" />
		<MSBuild.ExtensionPack.FileSystem.File TaskAction="WriteLines" Files="@(SecondLineFile)" Lines="$(SecLineOne)$(PatchNumber)$(SecLineTwo)" TextEncoding="ASCII"/>
		<Copy SourceFiles="@(SecondLineFile)" DestinationFolder="$(FullBuildPath)$(TempFolder)\P$(PatchNumber)" />
		<Exec Command='"$(MumpsFormatterHome)\MumpsFormatter.exe" -s 2nd_Line.txt -b $(BuildNumber)' WorkingDirectory="$(FullBuildPath)$(TempFolder)\P$(PatchNumber)" />
		<Delete Files="@(SecondLineFile)"	/>
		<ItemGroup>
			<NewMumpsFiles Include="$(FullBuildPath)$(TempFolder)\P$(PatchNumber)\*.new_RTN"  />
		</ItemGroup>
		
		<!-- rename .new_rtn files to .rtn and move to mumps\distrib folder -->
		<Copy SourceFiles="@(NewMumpsFiles)" DestinationFiles="@(NewMumpsFiles->'$(FullBuildPath)$(TempFolder)\MUMPS\Distrib\%(Filename).RTN')"  />
	</Target>

	<!-- ================== Update Second Line in Mumps file for patch and its dependencies ============================= -->
	<Target Name="SecondLineSecondPass" DependsOnTargets="SecondLineFirstPass" Outputs="%(Dependency.FullPath)">
		<!-- Extract second line by reading the version of the rtn (that is being processed in the work folder) from the baseline folder.  If the rtn	
			 does not exist in the baseline folder skip the ProcessSecondLine (second line processing) task. -->	
		<PropertyGroup>
			<FileName>%(Dependency.FileName)</FileName>
			<PatchDepNumber>%(Dependency.FolderName)</PatchDepNumber>
		</PropertyGroup>
		<message text="Patch number is %(Dependency.FolderName)" Importance="High"/>
		<!--Check the names of the routines from each of the patch dependency folders listed in build.kids.prop.  If the routine exisits in the patch being built copy routine from the patches distrib folder to the temporary work directory -->
		<message text="Reading routine: %(Dependency.FileName)" />
		<Copy SourceFiles="$(FullBuildPath)$(TempFolder)\MUMPS\Distrib\$(Filename).RTN" DestinationFolder="$(FullBuildPath)$(TempFolder)\MUMPS\Work\" Condition="Exists('$(FullBuildPath)$(TempFolder)\P$(PatchNumber)\$(FileName).RTN')" ContinueOnError="True" />

		<ItemGroup>
			<WorkRoutines Include="$(FullBuildPath)$(TempFolder)\MUMPS\Work\*.RTN" />
		</ItemGroup>

		<!-- Call the ProcessSecondLine task passing in the patch number, routine name, and baseline directory.  The task returns the new second line -->
		<message text="Reading work routine for second line processing: $(FullBuildPath)$(TempFolder)\MUMPS\Baseline\%(WorkRoutines.Filename)%(WorkRoutines.Extension)" />
		<ProcessSecondLine 
			Condition="Exists('$(FullBuildPath)$(TempFolder)\MUMPS\Work\$(FileName).RTN')"
			Routine="%(WorkRoutines.Filename)%(WorkRoutines.Extension)" 
			BaselineDir="$(FullBuildPath)$(TempFolder)\MUMPS\Baseline\"
			PatchNumber="$(PatchDepNumber)">
			<Output ItemName="ItemsFromFile" TaskParameter="FilteredLine" />
		</ProcessSecondLine>

		<!--Create a new 2nd_Line.txt file and write the returned second line (from the ReadSeconLine task) to 2nd_line.txt -->
		<WriteLinesToFile File="@(SecondLineFile)" Condition="Exists('$(FullBuildPath)$(TempFolder)\P$(PatchDepNumber)\$(FileName).RTN')" />		
		<MSBuild.ExtensionPack.FileSystem.File TaskAction="WriteLines" Files="@(SecondLineFile)" Lines="@(ItemsFromFile)" Condition="Exists('$(FullBuildPath)$(TempFolder)\MUMPS\Work\$(FileName).RTN')" TextEncoding="ASCII"/>
		
		<!-- Run Mumps Formatter on routines of patch folder(s) -->
		<Exec Command='"$(MumpsFormatterHome)\MumpsFormatter.exe" -s 2nd_Line.txt -b $(BuildNumber)' Condition="Exists('$(FullBuildPath)$(TempFolder)\MUMPS\Work\$(FileName).RTN')" WorkingDirectory="$(FullBuildPath)$(TempFolder)\MUMPS\Work"  />

		<ItemGroup>
			<NewMumpsWorkFiles Include="$(FullBuildPath)$(TempFolder)\MUMPS\Work\*.new_RTN"  />
		</ItemGroup>
		
		<!-- Rename .new_rtn files to .rtn and move to baseline for the next round of processing.  Move to mumps\rtn folders are each round of processing-->
		<Copy SourceFiles="@(NewMumpsWorkFiles)" DestinationFiles="@(NewMumpsWorkFiles->'$(FullBuildPath)$(TempFolder)\MUMPS\Baseline\%(RecursiveDir)%(Filename).RTN')" />		
		<Copy SourceFiles="@(NewMumpsWorkFiles)" DestinationFiles="@(NewMumpsWorkFiles->'$(ProjectDir)$(FullBuildPath)$(TempFolder)\MUMPS\Rtn\%(RecursiveDir)%(Filename).RTN')" />	
		<RemoveDir Directories="$(FullBuildPath)$(TempFolder)\MUMPS\Work" /> 
		<MakeDir directories="$(FullBuildPath)$(TempFolder)\MUMPS\Work"  />
	</Target>
	
	<Target Name="RollUpMumps" DependsOnTargets="SecondLineSecondPass" >
		<ItemGroup>
			<NewRtn Include="$(FullBuildPath)$(TempFolder)\MUMPS\Rtn\*.*"  />
		</ItemGroup>	
		
		<!-- move processed rtn files back to distrib folder and run mumps formatter against the folder -->
		<Copy SourceFiles="@(NewRtn)" DestinationFolder="$(FullBuildPath)$(TempFolder)\MUMPS\Distrib" />

		<Exec Command='"$(MumpsFormatterHome)\MumpsFormatter.exe" -x -l "$(PatchFolderName)"' WorkingDirectory="$(ProjectDir)$(FullBuildPath)$(TempFolder)\MUMPS\Distrib\" />
	</Target>

	<Target Name="MagCheck" DependsOnTargets="RollUpMumps" >
		<message text="MagCheck" Importance="High"/>
		<Exec Command='"$(FullBuildPath)$(TempFolder)\Utilities\Compiled\MagCheck.exe" %3CDICOMRtns.rtn%3E MAG_VistA_Check.txt'  WorkingDirectory="$(FullBuildPath)$(TempFolder)\MUMPS\Distrib" />	
		<Copy SourceFiles="$(FullBuildPath)$(TempFolder)\MUMPS\Distrib\MAG_VistA_Check.txt" DestinationFolder="$(FullBuildPath)$(TempFolder)\MagCheck\" />
		<Delete Files="$(FullBuildPath)$(TempFolder)\MUMPS\Distrib\MAG_VistA_Check.txt"	/>
	</Target>	
	
	<Target Name="CreateKIDS" DependsOnTargets="MagCheck" >
		<ItemGroup>	
			<Dep Include="-r=&quot;%(SplitDepen.Identity)^2&quot;" />
		</ItemGroup>
		<Exec Command="&quot;$(FullBuildPath)$(TempFolder)\Utilities\Compiled\MakeKid.exe&quot; -v=&quot;$(Version)&quot; -p=&quot;$(PatchNumber)&quot; -t=&quot;$(TestNumber)&quot; -l=&quot;$(PatchFolderName)_T$(TestNumber)&quot; -f=&quot;1&quot; -c=&quot;$(PatchName)&quot; -a=&quot;$(Post)&quot; -b=&quot;$(Pre)&quot; -e=&quot;$(Env)&quot; @(Dep->'%(Identity)',' ') -d=$(NoDelete) &quot;$(VistaVistaImagingDir)\VistaImaging\$(PatchName)\KIDS_Components\*.kid&quot; &quot;$(FullBuildPath)$(TempFolder)\MUMPS\Distrib\DICOMRtns.rtn&quot;" />	
	</Target>	
	
	<!-- Create final build outuput.  Create zip file and delete temp directory -->
	<Target Name="Publish" DependsOnTargets="CreateKIDS" Condition="'$(BuildKids)'!='false'" >
		<ItemGroup>
			<Routines Include="$(FullBuildPath)$(TempFolder)\MUMPS\Distrib\*.*" />
			<Kid Include=".\*.kid" />
			<Logs Include=".\*.log" />
		</ItemGroup>
		<Copy SourceFiles="@(Routines)" DestinationFolder="$(FullBuildPath)\Distrib"/>
		<Copy SourceFiles="@(KidsFiles)" DestinationFolder="$(FullBuildPath)\Components"/>
		<Copy SourceFiles="@(Kid)" DestinationFolder="$(FullBuildPath)"/>
		<RemoveDir Directories="$(FullBuildPath)$(TempFolder)" Condition="'$(TempDelete)'=='true'"  ContinueOnError="true"/>
		<Delete Files="@(Kid)" />
		<ItemGroup>
			<FilesToZip Include="$(FullBuildPath)\Distrib\*.*;$(FullBuildPath)\*.Kid" />
		</ItemGroup>		
		<message text="@(FilesToZip)" Importance="High"/>
		<MSBuild.ExtensionPack.Compression.Zip TaskAction="Create" CompressFiles="@(FilesToZip)" RemoveRoot="$(FullBuildPath)" ZipFileName="$(FullBuildPath)\%(KID.Filename).zip" />
		<Copy SourceFiles="$(FullBuildPath)\%(KID.Filename).zip" DestinationFolder="$(NetworkBuildReleaseDir)\$(PatchFolderName)_T$(TestNumber)" Condition="'$(MapDrives)'=='true'" ContinueOnError="True" />
		<ItemGroup>
			<BuildArtifacts Include="$(FullBuildPath)\*.zip;$(FullBuildPath)\*.txt" />
		</ItemGroup>		
		<Copy SourceFiles="@(BuildArtifacts)" Destinationfolder="$(NetworkBuildDir)\V$(Version)p$(PatchNumber)Build$(BuildNumber)_T$(TestNumber)"/>
		<Delete Files="$(FullBuildPath)\%(KID.Filename).zip" ContinueOnError="True" />
	</Target>
	
</Project>